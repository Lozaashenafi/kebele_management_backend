
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Kebeles
 * 
 */
export type Kebeles = $Result.DefaultSelection<Prisma.$KebelesPayload>
/**
 * Model KebeleMenders
 * 
 */
export type KebeleMenders = $Result.DefaultSelection<Prisma.$KebeleMendersPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Profiles
 * 
 */
export type Profiles = $Result.DefaultSelection<Prisma.$ProfilesPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ROLES: {
  USER: 'USER',
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  SECRATERY: 'SECRATERY'
};

export type ROLES = (typeof ROLES)[keyof typeof ROLES]


export const ACTIVESTATUS: {
  BLOCKED: 'BLOCKED',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

export type ACTIVESTATUS = (typeof ACTIVESTATUS)[keyof typeof ACTIVESTATUS]


export const GENDER: {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

export type GENDER = (typeof GENDER)[keyof typeof GENDER]

}

export type ROLES = $Enums.ROLES

export const ROLES: typeof $Enums.ROLES

export type ACTIVESTATUS = $Enums.ACTIVESTATUS

export const ACTIVESTATUS: typeof $Enums.ACTIVESTATUS

export type GENDER = $Enums.GENDER

export const GENDER: typeof $Enums.GENDER

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Addresses
 * const addresses = await prisma.address.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Addresses
   * const addresses = await prisma.address.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs>;

  /**
   * `prisma.kebeles`: Exposes CRUD operations for the **Kebeles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kebeles
    * const kebeles = await prisma.kebeles.findMany()
    * ```
    */
  get kebeles(): Prisma.KebelesDelegate<ExtArgs>;

  /**
   * `prisma.kebeleMenders`: Exposes CRUD operations for the **KebeleMenders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KebeleMenders
    * const kebeleMenders = await prisma.kebeleMenders.findMany()
    * ```
    */
  get kebeleMenders(): Prisma.KebeleMendersDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.profiles`: Exposes CRUD operations for the **Profiles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profiles.findMany()
    * ```
    */
  get profiles(): Prisma.ProfilesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Address: 'Address',
    Kebeles: 'Kebeles',
    KebeleMenders: 'KebeleMenders',
    Users: 'Users',
    Profiles: 'Profiles'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'address' | 'kebeles' | 'kebeleMenders' | 'users' | 'profiles'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>,
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Kebeles: {
        payload: Prisma.$KebelesPayload<ExtArgs>
        fields: Prisma.KebelesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KebelesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebelesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KebelesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebelesPayload>
          }
          findFirst: {
            args: Prisma.KebelesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebelesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KebelesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebelesPayload>
          }
          findMany: {
            args: Prisma.KebelesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebelesPayload>[]
          }
          create: {
            args: Prisma.KebelesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebelesPayload>
          }
          createMany: {
            args: Prisma.KebelesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KebelesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebelesPayload>
          }
          update: {
            args: Prisma.KebelesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebelesPayload>
          }
          deleteMany: {
            args: Prisma.KebelesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KebelesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KebelesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebelesPayload>
          }
          aggregate: {
            args: Prisma.KebelesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKebeles>
          }
          groupBy: {
            args: Prisma.KebelesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KebelesGroupByOutputType>[]
          }
          count: {
            args: Prisma.KebelesCountArgs<ExtArgs>,
            result: $Utils.Optional<KebelesCountAggregateOutputType> | number
          }
        }
      }
      KebeleMenders: {
        payload: Prisma.$KebeleMendersPayload<ExtArgs>
        fields: Prisma.KebeleMendersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KebeleMendersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebeleMendersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KebeleMendersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebeleMendersPayload>
          }
          findFirst: {
            args: Prisma.KebeleMendersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebeleMendersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KebeleMendersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebeleMendersPayload>
          }
          findMany: {
            args: Prisma.KebeleMendersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebeleMendersPayload>[]
          }
          create: {
            args: Prisma.KebeleMendersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebeleMendersPayload>
          }
          createMany: {
            args: Prisma.KebeleMendersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KebeleMendersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebeleMendersPayload>
          }
          update: {
            args: Prisma.KebeleMendersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebeleMendersPayload>
          }
          deleteMany: {
            args: Prisma.KebeleMendersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KebeleMendersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KebeleMendersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KebeleMendersPayload>
          }
          aggregate: {
            args: Prisma.KebeleMendersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKebeleMenders>
          }
          groupBy: {
            args: Prisma.KebeleMendersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KebeleMendersGroupByOutputType>[]
          }
          count: {
            args: Prisma.KebeleMendersCountArgs<ExtArgs>,
            result: $Utils.Optional<KebeleMendersCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Profiles: {
        payload: Prisma.$ProfilesPayload<ExtArgs>
        fields: Prisma.ProfilesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfilesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfilesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          findFirst: {
            args: Prisma.ProfilesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfilesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          findMany: {
            args: Prisma.ProfilesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>[]
          }
          create: {
            args: Prisma.ProfilesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          createMany: {
            args: Prisma.ProfilesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProfilesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          update: {
            args: Prisma.ProfilesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          deleteMany: {
            args: Prisma.ProfilesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProfilesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProfilesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProfilesPayload>
          }
          aggregate: {
            args: Prisma.ProfilesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProfiles>
          }
          groupBy: {
            args: Prisma.ProfilesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProfilesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfilesCountArgs<ExtArgs>,
            result: $Utils.Optional<ProfilesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type AddressCountOutputType
   */

  export type AddressCountOutputType = {
    kebele: number
    users: number
  }

  export type AddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kebele?: boolean | AddressCountOutputTypeCountKebeleArgs
    users?: boolean | AddressCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     */
    select?: AddressCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountKebeleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KebelesWhereInput
  }


  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }



  /**
   * Count Type KebelesCountOutputType
   */

  export type KebelesCountOutputType = {
    meder: number
    users: number
  }

  export type KebelesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meder?: boolean | KebelesCountOutputTypeCountMederArgs
    users?: boolean | KebelesCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * KebelesCountOutputType without action
   */
  export type KebelesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebelesCountOutputType
     */
    select?: KebelesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * KebelesCountOutputType without action
   */
  export type KebelesCountOutputTypeCountMederArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KebeleMendersWhereInput
  }


  /**
   * KebelesCountOutputType without action
   */
  export type KebelesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }



  /**
   * Count Type KebeleMendersCountOutputType
   */

  export type KebeleMendersCountOutputType = {
    users: number
  }

  export type KebeleMendersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | KebeleMendersCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * KebeleMendersCountOutputType without action
   */
  export type KebeleMendersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMendersCountOutputType
     */
    select?: KebeleMendersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * KebeleMendersCountOutputType without action
   */
  export type KebeleMendersCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: number | null
    region: string | null
    zone: string | null
    wereda: string | null
    city: string | null
  }

  export type AddressMaxAggregateOutputType = {
    id: number | null
    region: string | null
    zone: string | null
    wereda: string | null
    city: string | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    region: number
    zone: number
    wereda: number
    city: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    region?: true
    zone?: true
    wereda?: true
    city?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    region?: true
    zone?: true
    wereda?: true
    city?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    region?: true
    zone?: true
    wereda?: true
    city?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: number
    region: string
    zone: string
    wereda: string
    city: string
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    region?: boolean
    zone?: boolean
    wereda?: boolean
    city?: boolean
    kebele?: boolean | Address$kebeleArgs<ExtArgs>
    users?: boolean | Address$usersArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    region?: boolean
    zone?: boolean
    wereda?: boolean
    city?: boolean
  }

  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kebele?: boolean | Address$kebeleArgs<ExtArgs>
    users?: boolean | Address$usersArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      kebele: Prisma.$KebelesPayload<ExtArgs>[]
      users: Prisma.$UsersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      region: string
      zone: string
      wereda: string
      city: string
    }, ExtArgs["result"]["address"]>
    composites: {}
  }


  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Address that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressCreateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Addresses.
     *     @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     *     @example
     *     // Create many Addresses
     *     const address = await prisma.address.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AddressCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    kebele<T extends Address$kebeleArgs<ExtArgs> = {}>(args?: Subset<T, Address$kebeleArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends Address$usersArgs<ExtArgs> = {}>(args?: Subset<T, Address$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'Int'>
    readonly region: FieldRef<"Address", 'String'>
    readonly zone: FieldRef<"Address", 'String'>
    readonly wereda: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }


  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
  }


  /**
   * Address.kebele
   */
  export type Address$kebeleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
    where?: KebelesWhereInput
    orderBy?: KebelesOrderByWithRelationInput | KebelesOrderByWithRelationInput[]
    cursor?: KebelesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KebelesScalarFieldEnum | KebelesScalarFieldEnum[]
  }


  /**
   * Address.users
   */
  export type Address$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
  }



  /**
   * Model Kebeles
   */

  export type AggregateKebeles = {
    _count: KebelesCountAggregateOutputType | null
    _avg: KebelesAvgAggregateOutputType | null
    _sum: KebelesSumAggregateOutputType | null
    _min: KebelesMinAggregateOutputType | null
    _max: KebelesMaxAggregateOutputType | null
  }

  export type KebelesAvgAggregateOutputType = {
    id: number | null
    addressId: number | null
  }

  export type KebelesSumAggregateOutputType = {
    id: number | null
    addressId: number | null
  }

  export type KebelesMinAggregateOutputType = {
    id: number | null
    name: string | null
    addressId: number | null
  }

  export type KebelesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    addressId: number | null
  }

  export type KebelesCountAggregateOutputType = {
    id: number
    name: number
    addressId: number
    _all: number
  }


  export type KebelesAvgAggregateInputType = {
    id?: true
    addressId?: true
  }

  export type KebelesSumAggregateInputType = {
    id?: true
    addressId?: true
  }

  export type KebelesMinAggregateInputType = {
    id?: true
    name?: true
    addressId?: true
  }

  export type KebelesMaxAggregateInputType = {
    id?: true
    name?: true
    addressId?: true
  }

  export type KebelesCountAggregateInputType = {
    id?: true
    name?: true
    addressId?: true
    _all?: true
  }

  export type KebelesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kebeles to aggregate.
     */
    where?: KebelesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kebeles to fetch.
     */
    orderBy?: KebelesOrderByWithRelationInput | KebelesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KebelesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kebeles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kebeles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kebeles
    **/
    _count?: true | KebelesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KebelesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KebelesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KebelesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KebelesMaxAggregateInputType
  }

  export type GetKebelesAggregateType<T extends KebelesAggregateArgs> = {
        [P in keyof T & keyof AggregateKebeles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKebeles[P]>
      : GetScalarType<T[P], AggregateKebeles[P]>
  }




  export type KebelesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KebelesWhereInput
    orderBy?: KebelesOrderByWithAggregationInput | KebelesOrderByWithAggregationInput[]
    by: KebelesScalarFieldEnum[] | KebelesScalarFieldEnum
    having?: KebelesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KebelesCountAggregateInputType | true
    _avg?: KebelesAvgAggregateInputType
    _sum?: KebelesSumAggregateInputType
    _min?: KebelesMinAggregateInputType
    _max?: KebelesMaxAggregateInputType
  }

  export type KebelesGroupByOutputType = {
    id: number
    name: string
    addressId: number
    _count: KebelesCountAggregateOutputType | null
    _avg: KebelesAvgAggregateOutputType | null
    _sum: KebelesSumAggregateOutputType | null
    _min: KebelesMinAggregateOutputType | null
    _max: KebelesMaxAggregateOutputType | null
  }

  type GetKebelesGroupByPayload<T extends KebelesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KebelesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KebelesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KebelesGroupByOutputType[P]>
            : GetScalarType<T[P], KebelesGroupByOutputType[P]>
        }
      >
    >


  export type KebelesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    addressId?: boolean
    address?: boolean | AddressDefaultArgs<ExtArgs>
    meder?: boolean | Kebeles$mederArgs<ExtArgs>
    users?: boolean | Kebeles$usersArgs<ExtArgs>
    _count?: boolean | KebelesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kebeles"]>

  export type KebelesSelectScalar = {
    id?: boolean
    name?: boolean
    addressId?: boolean
  }

  export type KebelesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | AddressDefaultArgs<ExtArgs>
    meder?: boolean | Kebeles$mederArgs<ExtArgs>
    users?: boolean | Kebeles$usersArgs<ExtArgs>
    _count?: boolean | KebelesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $KebelesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kebeles"
    objects: {
      address: Prisma.$AddressPayload<ExtArgs>
      meder: Prisma.$KebeleMendersPayload<ExtArgs>[]
      users: Prisma.$UsersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      addressId: number
    }, ExtArgs["result"]["kebeles"]>
    composites: {}
  }


  type KebelesGetPayload<S extends boolean | null | undefined | KebelesDefaultArgs> = $Result.GetResult<Prisma.$KebelesPayload, S>

  type KebelesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KebelesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KebelesCountAggregateInputType | true
    }

  export interface KebelesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kebeles'], meta: { name: 'Kebeles' } }
    /**
     * Find zero or one Kebeles that matches the filter.
     * @param {KebelesFindUniqueArgs} args - Arguments to find a Kebeles
     * @example
     * // Get one Kebeles
     * const kebeles = await prisma.kebeles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KebelesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KebelesFindUniqueArgs<ExtArgs>>
    ): Prisma__KebelesClient<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Kebeles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KebelesFindUniqueOrThrowArgs} args - Arguments to find a Kebeles
     * @example
     * // Get one Kebeles
     * const kebeles = await prisma.kebeles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KebelesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KebelesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KebelesClient<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Kebeles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebelesFindFirstArgs} args - Arguments to find a Kebeles
     * @example
     * // Get one Kebeles
     * const kebeles = await prisma.kebeles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KebelesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KebelesFindFirstArgs<ExtArgs>>
    ): Prisma__KebelesClient<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Kebeles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebelesFindFirstOrThrowArgs} args - Arguments to find a Kebeles
     * @example
     * // Get one Kebeles
     * const kebeles = await prisma.kebeles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KebelesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KebelesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KebelesClient<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Kebeles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebelesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kebeles
     * const kebeles = await prisma.kebeles.findMany()
     * 
     * // Get first 10 Kebeles
     * const kebeles = await prisma.kebeles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kebelesWithIdOnly = await prisma.kebeles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KebelesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KebelesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Kebeles.
     * @param {KebelesCreateArgs} args - Arguments to create a Kebeles.
     * @example
     * // Create one Kebeles
     * const Kebeles = await prisma.kebeles.create({
     *   data: {
     *     // ... data to create a Kebeles
     *   }
     * })
     * 
    **/
    create<T extends KebelesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KebelesCreateArgs<ExtArgs>>
    ): Prisma__KebelesClient<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Kebeles.
     *     @param {KebelesCreateManyArgs} args - Arguments to create many Kebeles.
     *     @example
     *     // Create many Kebeles
     *     const kebeles = await prisma.kebeles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KebelesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KebelesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kebeles.
     * @param {KebelesDeleteArgs} args - Arguments to delete one Kebeles.
     * @example
     * // Delete one Kebeles
     * const Kebeles = await prisma.kebeles.delete({
     *   where: {
     *     // ... filter to delete one Kebeles
     *   }
     * })
     * 
    **/
    delete<T extends KebelesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KebelesDeleteArgs<ExtArgs>>
    ): Prisma__KebelesClient<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Kebeles.
     * @param {KebelesUpdateArgs} args - Arguments to update one Kebeles.
     * @example
     * // Update one Kebeles
     * const kebeles = await prisma.kebeles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KebelesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KebelesUpdateArgs<ExtArgs>>
    ): Prisma__KebelesClient<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Kebeles.
     * @param {KebelesDeleteManyArgs} args - Arguments to filter Kebeles to delete.
     * @example
     * // Delete a few Kebeles
     * const { count } = await prisma.kebeles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KebelesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KebelesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kebeles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebelesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kebeles
     * const kebeles = await prisma.kebeles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KebelesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KebelesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kebeles.
     * @param {KebelesUpsertArgs} args - Arguments to update or create a Kebeles.
     * @example
     * // Update or create a Kebeles
     * const kebeles = await prisma.kebeles.upsert({
     *   create: {
     *     // ... data to create a Kebeles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kebeles we want to update
     *   }
     * })
    **/
    upsert<T extends KebelesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KebelesUpsertArgs<ExtArgs>>
    ): Prisma__KebelesClient<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Kebeles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebelesCountArgs} args - Arguments to filter Kebeles to count.
     * @example
     * // Count the number of Kebeles
     * const count = await prisma.kebeles.count({
     *   where: {
     *     // ... the filter for the Kebeles we want to count
     *   }
     * })
    **/
    count<T extends KebelesCountArgs>(
      args?: Subset<T, KebelesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KebelesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kebeles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebelesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KebelesAggregateArgs>(args: Subset<T, KebelesAggregateArgs>): Prisma.PrismaPromise<GetKebelesAggregateType<T>>

    /**
     * Group by Kebeles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebelesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KebelesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KebelesGroupByArgs['orderBy'] }
        : { orderBy?: KebelesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KebelesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKebelesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kebeles model
   */
  readonly fields: KebelesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kebeles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KebelesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    address<T extends AddressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AddressDefaultArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    meder<T extends Kebeles$mederArgs<ExtArgs> = {}>(args?: Subset<T, Kebeles$mederArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'findMany'> | Null>;

    users<T extends Kebeles$usersArgs<ExtArgs> = {}>(args?: Subset<T, Kebeles$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Kebeles model
   */ 
  interface KebelesFieldRefs {
    readonly id: FieldRef<"Kebeles", 'Int'>
    readonly name: FieldRef<"Kebeles", 'String'>
    readonly addressId: FieldRef<"Kebeles", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Kebeles findUnique
   */
  export type KebelesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
    /**
     * Filter, which Kebeles to fetch.
     */
    where: KebelesWhereUniqueInput
  }


  /**
   * Kebeles findUniqueOrThrow
   */
  export type KebelesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
    /**
     * Filter, which Kebeles to fetch.
     */
    where: KebelesWhereUniqueInput
  }


  /**
   * Kebeles findFirst
   */
  export type KebelesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
    /**
     * Filter, which Kebeles to fetch.
     */
    where?: KebelesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kebeles to fetch.
     */
    orderBy?: KebelesOrderByWithRelationInput | KebelesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kebeles.
     */
    cursor?: KebelesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kebeles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kebeles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kebeles.
     */
    distinct?: KebelesScalarFieldEnum | KebelesScalarFieldEnum[]
  }


  /**
   * Kebeles findFirstOrThrow
   */
  export type KebelesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
    /**
     * Filter, which Kebeles to fetch.
     */
    where?: KebelesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kebeles to fetch.
     */
    orderBy?: KebelesOrderByWithRelationInput | KebelesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kebeles.
     */
    cursor?: KebelesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kebeles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kebeles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kebeles.
     */
    distinct?: KebelesScalarFieldEnum | KebelesScalarFieldEnum[]
  }


  /**
   * Kebeles findMany
   */
  export type KebelesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
    /**
     * Filter, which Kebeles to fetch.
     */
    where?: KebelesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kebeles to fetch.
     */
    orderBy?: KebelesOrderByWithRelationInput | KebelesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kebeles.
     */
    cursor?: KebelesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kebeles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kebeles.
     */
    skip?: number
    distinct?: KebelesScalarFieldEnum | KebelesScalarFieldEnum[]
  }


  /**
   * Kebeles create
   */
  export type KebelesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
    /**
     * The data needed to create a Kebeles.
     */
    data: XOR<KebelesCreateInput, KebelesUncheckedCreateInput>
  }


  /**
   * Kebeles createMany
   */
  export type KebelesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kebeles.
     */
    data: KebelesCreateManyInput | KebelesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Kebeles update
   */
  export type KebelesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
    /**
     * The data needed to update a Kebeles.
     */
    data: XOR<KebelesUpdateInput, KebelesUncheckedUpdateInput>
    /**
     * Choose, which Kebeles to update.
     */
    where: KebelesWhereUniqueInput
  }


  /**
   * Kebeles updateMany
   */
  export type KebelesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kebeles.
     */
    data: XOR<KebelesUpdateManyMutationInput, KebelesUncheckedUpdateManyInput>
    /**
     * Filter which Kebeles to update
     */
    where?: KebelesWhereInput
  }


  /**
   * Kebeles upsert
   */
  export type KebelesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
    /**
     * The filter to search for the Kebeles to update in case it exists.
     */
    where: KebelesWhereUniqueInput
    /**
     * In case the Kebeles found by the `where` argument doesn't exist, create a new Kebeles with this data.
     */
    create: XOR<KebelesCreateInput, KebelesUncheckedCreateInput>
    /**
     * In case the Kebeles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KebelesUpdateInput, KebelesUncheckedUpdateInput>
  }


  /**
   * Kebeles delete
   */
  export type KebelesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
    /**
     * Filter which Kebeles to delete.
     */
    where: KebelesWhereUniqueInput
  }


  /**
   * Kebeles deleteMany
   */
  export type KebelesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kebeles to delete
     */
    where?: KebelesWhereInput
  }


  /**
   * Kebeles.meder
   */
  export type Kebeles$mederArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
    where?: KebeleMendersWhereInput
    orderBy?: KebeleMendersOrderByWithRelationInput | KebeleMendersOrderByWithRelationInput[]
    cursor?: KebeleMendersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: KebeleMendersScalarFieldEnum | KebeleMendersScalarFieldEnum[]
  }


  /**
   * Kebeles.users
   */
  export type Kebeles$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Kebeles without action
   */
  export type KebelesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kebeles
     */
    select?: KebelesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebelesInclude<ExtArgs> | null
  }



  /**
   * Model KebeleMenders
   */

  export type AggregateKebeleMenders = {
    _count: KebeleMendersCountAggregateOutputType | null
    _avg: KebeleMendersAvgAggregateOutputType | null
    _sum: KebeleMendersSumAggregateOutputType | null
    _min: KebeleMendersMinAggregateOutputType | null
    _max: KebeleMendersMaxAggregateOutputType | null
  }

  export type KebeleMendersAvgAggregateOutputType = {
    id: number | null
    kebeleId: number | null
  }

  export type KebeleMendersSumAggregateOutputType = {
    id: number | null
    kebeleId: number | null
  }

  export type KebeleMendersMinAggregateOutputType = {
    id: number | null
    kebeleId: number | null
    menderName: string | null
  }

  export type KebeleMendersMaxAggregateOutputType = {
    id: number | null
    kebeleId: number | null
    menderName: string | null
  }

  export type KebeleMendersCountAggregateOutputType = {
    id: number
    kebeleId: number
    menderName: number
    _all: number
  }


  export type KebeleMendersAvgAggregateInputType = {
    id?: true
    kebeleId?: true
  }

  export type KebeleMendersSumAggregateInputType = {
    id?: true
    kebeleId?: true
  }

  export type KebeleMendersMinAggregateInputType = {
    id?: true
    kebeleId?: true
    menderName?: true
  }

  export type KebeleMendersMaxAggregateInputType = {
    id?: true
    kebeleId?: true
    menderName?: true
  }

  export type KebeleMendersCountAggregateInputType = {
    id?: true
    kebeleId?: true
    menderName?: true
    _all?: true
  }

  export type KebeleMendersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KebeleMenders to aggregate.
     */
    where?: KebeleMendersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KebeleMenders to fetch.
     */
    orderBy?: KebeleMendersOrderByWithRelationInput | KebeleMendersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KebeleMendersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KebeleMenders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KebeleMenders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KebeleMenders
    **/
    _count?: true | KebeleMendersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KebeleMendersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KebeleMendersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KebeleMendersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KebeleMendersMaxAggregateInputType
  }

  export type GetKebeleMendersAggregateType<T extends KebeleMendersAggregateArgs> = {
        [P in keyof T & keyof AggregateKebeleMenders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKebeleMenders[P]>
      : GetScalarType<T[P], AggregateKebeleMenders[P]>
  }




  export type KebeleMendersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KebeleMendersWhereInput
    orderBy?: KebeleMendersOrderByWithAggregationInput | KebeleMendersOrderByWithAggregationInput[]
    by: KebeleMendersScalarFieldEnum[] | KebeleMendersScalarFieldEnum
    having?: KebeleMendersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KebeleMendersCountAggregateInputType | true
    _avg?: KebeleMendersAvgAggregateInputType
    _sum?: KebeleMendersSumAggregateInputType
    _min?: KebeleMendersMinAggregateInputType
    _max?: KebeleMendersMaxAggregateInputType
  }

  export type KebeleMendersGroupByOutputType = {
    id: number
    kebeleId: number
    menderName: string
    _count: KebeleMendersCountAggregateOutputType | null
    _avg: KebeleMendersAvgAggregateOutputType | null
    _sum: KebeleMendersSumAggregateOutputType | null
    _min: KebeleMendersMinAggregateOutputType | null
    _max: KebeleMendersMaxAggregateOutputType | null
  }

  type GetKebeleMendersGroupByPayload<T extends KebeleMendersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KebeleMendersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KebeleMendersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KebeleMendersGroupByOutputType[P]>
            : GetScalarType<T[P], KebeleMendersGroupByOutputType[P]>
        }
      >
    >


  export type KebeleMendersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kebeleId?: boolean
    menderName?: boolean
    kebele?: boolean | KebelesDefaultArgs<ExtArgs>
    users?: boolean | KebeleMenders$usersArgs<ExtArgs>
    _count?: boolean | KebeleMendersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kebeleMenders"]>

  export type KebeleMendersSelectScalar = {
    id?: boolean
    kebeleId?: boolean
    menderName?: boolean
  }

  export type KebeleMendersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kebele?: boolean | KebelesDefaultArgs<ExtArgs>
    users?: boolean | KebeleMenders$usersArgs<ExtArgs>
    _count?: boolean | KebeleMendersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $KebeleMendersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KebeleMenders"
    objects: {
      kebele: Prisma.$KebelesPayload<ExtArgs>
      users: Prisma.$UsersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      kebeleId: number
      menderName: string
    }, ExtArgs["result"]["kebeleMenders"]>
    composites: {}
  }


  type KebeleMendersGetPayload<S extends boolean | null | undefined | KebeleMendersDefaultArgs> = $Result.GetResult<Prisma.$KebeleMendersPayload, S>

  type KebeleMendersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KebeleMendersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KebeleMendersCountAggregateInputType | true
    }

  export interface KebeleMendersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KebeleMenders'], meta: { name: 'KebeleMenders' } }
    /**
     * Find zero or one KebeleMenders that matches the filter.
     * @param {KebeleMendersFindUniqueArgs} args - Arguments to find a KebeleMenders
     * @example
     * // Get one KebeleMenders
     * const kebeleMenders = await prisma.kebeleMenders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KebeleMendersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KebeleMendersFindUniqueArgs<ExtArgs>>
    ): Prisma__KebeleMendersClient<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one KebeleMenders that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KebeleMendersFindUniqueOrThrowArgs} args - Arguments to find a KebeleMenders
     * @example
     * // Get one KebeleMenders
     * const kebeleMenders = await prisma.kebeleMenders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KebeleMendersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KebeleMendersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KebeleMendersClient<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first KebeleMenders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebeleMendersFindFirstArgs} args - Arguments to find a KebeleMenders
     * @example
     * // Get one KebeleMenders
     * const kebeleMenders = await prisma.kebeleMenders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KebeleMendersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KebeleMendersFindFirstArgs<ExtArgs>>
    ): Prisma__KebeleMendersClient<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first KebeleMenders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebeleMendersFindFirstOrThrowArgs} args - Arguments to find a KebeleMenders
     * @example
     * // Get one KebeleMenders
     * const kebeleMenders = await prisma.kebeleMenders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KebeleMendersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KebeleMendersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KebeleMendersClient<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more KebeleMenders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebeleMendersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KebeleMenders
     * const kebeleMenders = await prisma.kebeleMenders.findMany()
     * 
     * // Get first 10 KebeleMenders
     * const kebeleMenders = await prisma.kebeleMenders.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kebeleMendersWithIdOnly = await prisma.kebeleMenders.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KebeleMendersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KebeleMendersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a KebeleMenders.
     * @param {KebeleMendersCreateArgs} args - Arguments to create a KebeleMenders.
     * @example
     * // Create one KebeleMenders
     * const KebeleMenders = await prisma.kebeleMenders.create({
     *   data: {
     *     // ... data to create a KebeleMenders
     *   }
     * })
     * 
    **/
    create<T extends KebeleMendersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KebeleMendersCreateArgs<ExtArgs>>
    ): Prisma__KebeleMendersClient<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many KebeleMenders.
     *     @param {KebeleMendersCreateManyArgs} args - Arguments to create many KebeleMenders.
     *     @example
     *     // Create many KebeleMenders
     *     const kebeleMenders = await prisma.kebeleMenders.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KebeleMendersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KebeleMendersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a KebeleMenders.
     * @param {KebeleMendersDeleteArgs} args - Arguments to delete one KebeleMenders.
     * @example
     * // Delete one KebeleMenders
     * const KebeleMenders = await prisma.kebeleMenders.delete({
     *   where: {
     *     // ... filter to delete one KebeleMenders
     *   }
     * })
     * 
    **/
    delete<T extends KebeleMendersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KebeleMendersDeleteArgs<ExtArgs>>
    ): Prisma__KebeleMendersClient<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one KebeleMenders.
     * @param {KebeleMendersUpdateArgs} args - Arguments to update one KebeleMenders.
     * @example
     * // Update one KebeleMenders
     * const kebeleMenders = await prisma.kebeleMenders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KebeleMendersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KebeleMendersUpdateArgs<ExtArgs>>
    ): Prisma__KebeleMendersClient<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more KebeleMenders.
     * @param {KebeleMendersDeleteManyArgs} args - Arguments to filter KebeleMenders to delete.
     * @example
     * // Delete a few KebeleMenders
     * const { count } = await prisma.kebeleMenders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KebeleMendersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KebeleMendersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KebeleMenders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebeleMendersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KebeleMenders
     * const kebeleMenders = await prisma.kebeleMenders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KebeleMendersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KebeleMendersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KebeleMenders.
     * @param {KebeleMendersUpsertArgs} args - Arguments to update or create a KebeleMenders.
     * @example
     * // Update or create a KebeleMenders
     * const kebeleMenders = await prisma.kebeleMenders.upsert({
     *   create: {
     *     // ... data to create a KebeleMenders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KebeleMenders we want to update
     *   }
     * })
    **/
    upsert<T extends KebeleMendersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KebeleMendersUpsertArgs<ExtArgs>>
    ): Prisma__KebeleMendersClient<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of KebeleMenders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebeleMendersCountArgs} args - Arguments to filter KebeleMenders to count.
     * @example
     * // Count the number of KebeleMenders
     * const count = await prisma.kebeleMenders.count({
     *   where: {
     *     // ... the filter for the KebeleMenders we want to count
     *   }
     * })
    **/
    count<T extends KebeleMendersCountArgs>(
      args?: Subset<T, KebeleMendersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KebeleMendersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KebeleMenders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebeleMendersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KebeleMendersAggregateArgs>(args: Subset<T, KebeleMendersAggregateArgs>): Prisma.PrismaPromise<GetKebeleMendersAggregateType<T>>

    /**
     * Group by KebeleMenders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KebeleMendersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KebeleMendersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KebeleMendersGroupByArgs['orderBy'] }
        : { orderBy?: KebeleMendersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KebeleMendersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKebeleMendersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KebeleMenders model
   */
  readonly fields: KebeleMendersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KebeleMenders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KebeleMendersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    kebele<T extends KebelesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KebelesDefaultArgs<ExtArgs>>): Prisma__KebelesClient<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    users<T extends KebeleMenders$usersArgs<ExtArgs> = {}>(args?: Subset<T, KebeleMenders$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the KebeleMenders model
   */ 
  interface KebeleMendersFieldRefs {
    readonly id: FieldRef<"KebeleMenders", 'Int'>
    readonly kebeleId: FieldRef<"KebeleMenders", 'Int'>
    readonly menderName: FieldRef<"KebeleMenders", 'String'>
  }
    

  // Custom InputTypes

  /**
   * KebeleMenders findUnique
   */
  export type KebeleMendersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
    /**
     * Filter, which KebeleMenders to fetch.
     */
    where: KebeleMendersWhereUniqueInput
  }


  /**
   * KebeleMenders findUniqueOrThrow
   */
  export type KebeleMendersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
    /**
     * Filter, which KebeleMenders to fetch.
     */
    where: KebeleMendersWhereUniqueInput
  }


  /**
   * KebeleMenders findFirst
   */
  export type KebeleMendersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
    /**
     * Filter, which KebeleMenders to fetch.
     */
    where?: KebeleMendersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KebeleMenders to fetch.
     */
    orderBy?: KebeleMendersOrderByWithRelationInput | KebeleMendersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KebeleMenders.
     */
    cursor?: KebeleMendersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KebeleMenders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KebeleMenders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KebeleMenders.
     */
    distinct?: KebeleMendersScalarFieldEnum | KebeleMendersScalarFieldEnum[]
  }


  /**
   * KebeleMenders findFirstOrThrow
   */
  export type KebeleMendersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
    /**
     * Filter, which KebeleMenders to fetch.
     */
    where?: KebeleMendersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KebeleMenders to fetch.
     */
    orderBy?: KebeleMendersOrderByWithRelationInput | KebeleMendersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KebeleMenders.
     */
    cursor?: KebeleMendersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KebeleMenders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KebeleMenders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KebeleMenders.
     */
    distinct?: KebeleMendersScalarFieldEnum | KebeleMendersScalarFieldEnum[]
  }


  /**
   * KebeleMenders findMany
   */
  export type KebeleMendersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
    /**
     * Filter, which KebeleMenders to fetch.
     */
    where?: KebeleMendersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KebeleMenders to fetch.
     */
    orderBy?: KebeleMendersOrderByWithRelationInput | KebeleMendersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KebeleMenders.
     */
    cursor?: KebeleMendersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KebeleMenders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KebeleMenders.
     */
    skip?: number
    distinct?: KebeleMendersScalarFieldEnum | KebeleMendersScalarFieldEnum[]
  }


  /**
   * KebeleMenders create
   */
  export type KebeleMendersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
    /**
     * The data needed to create a KebeleMenders.
     */
    data: XOR<KebeleMendersCreateInput, KebeleMendersUncheckedCreateInput>
  }


  /**
   * KebeleMenders createMany
   */
  export type KebeleMendersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KebeleMenders.
     */
    data: KebeleMendersCreateManyInput | KebeleMendersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * KebeleMenders update
   */
  export type KebeleMendersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
    /**
     * The data needed to update a KebeleMenders.
     */
    data: XOR<KebeleMendersUpdateInput, KebeleMendersUncheckedUpdateInput>
    /**
     * Choose, which KebeleMenders to update.
     */
    where: KebeleMendersWhereUniqueInput
  }


  /**
   * KebeleMenders updateMany
   */
  export type KebeleMendersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KebeleMenders.
     */
    data: XOR<KebeleMendersUpdateManyMutationInput, KebeleMendersUncheckedUpdateManyInput>
    /**
     * Filter which KebeleMenders to update
     */
    where?: KebeleMendersWhereInput
  }


  /**
   * KebeleMenders upsert
   */
  export type KebeleMendersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
    /**
     * The filter to search for the KebeleMenders to update in case it exists.
     */
    where: KebeleMendersWhereUniqueInput
    /**
     * In case the KebeleMenders found by the `where` argument doesn't exist, create a new KebeleMenders with this data.
     */
    create: XOR<KebeleMendersCreateInput, KebeleMendersUncheckedCreateInput>
    /**
     * In case the KebeleMenders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KebeleMendersUpdateInput, KebeleMendersUncheckedUpdateInput>
  }


  /**
   * KebeleMenders delete
   */
  export type KebeleMendersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
    /**
     * Filter which KebeleMenders to delete.
     */
    where: KebeleMendersWhereUniqueInput
  }


  /**
   * KebeleMenders deleteMany
   */
  export type KebeleMendersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KebeleMenders to delete
     */
    where?: KebeleMendersWhereInput
  }


  /**
   * KebeleMenders.users
   */
  export type KebeleMenders$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * KebeleMenders without action
   */
  export type KebeleMendersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KebeleMenders
     */
    select?: KebeleMendersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: KebeleMendersInclude<ExtArgs> | null
  }



  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    kebeleId: number | null
    adressId: number | null
    kebeleMenderId: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    kebeleId: number | null
    adressId: number | null
    kebeleMenderId: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    phone: string | null
    password: string | null
    role: $Enums.ROLES | null
    activeStatus: $Enums.ACTIVESTATUS | null
    kebeleId: number | null
    adressId: number | null
    kebeleMenderId: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    phone: string | null
    password: string | null
    role: $Enums.ROLES | null
    activeStatus: $Enums.ACTIVESTATUS | null
    kebeleId: number | null
    adressId: number | null
    kebeleMenderId: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    phone: number
    password: number
    role: number
    activeStatus: number
    kebeleId: number
    adressId: number
    kebeleMenderId: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    kebeleId?: true
    adressId?: true
    kebeleMenderId?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    kebeleId?: true
    adressId?: true
    kebeleMenderId?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    password?: true
    role?: true
    activeStatus?: true
    kebeleId?: true
    adressId?: true
    kebeleMenderId?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    password?: true
    role?: true
    activeStatus?: true
    kebeleId?: true
    adressId?: true
    kebeleMenderId?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    password?: true
    role?: true
    activeStatus?: true
    kebeleId?: true
    adressId?: true
    kebeleMenderId?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    email: string
    phone: string
    password: string
    role: $Enums.ROLES
    activeStatus: $Enums.ACTIVESTATUS
    kebeleId: number
    adressId: number
    kebeleMenderId: number
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    role?: boolean
    activeStatus?: boolean
    kebeleId?: boolean
    adressId?: boolean
    kebeleMenderId?: boolean
    profile?: boolean | Users$profileArgs<ExtArgs>
    adress?: boolean | AddressDefaultArgs<ExtArgs>
    kebele?: boolean | KebelesDefaultArgs<ExtArgs>
    kebeleMender?: boolean | KebeleMendersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    email?: boolean
    phone?: boolean
    password?: boolean
    role?: boolean
    activeStatus?: boolean
    kebeleId?: boolean
    adressId?: boolean
    kebeleMenderId?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    profile?: boolean | Users$profileArgs<ExtArgs>
    adress?: boolean | AddressDefaultArgs<ExtArgs>
    kebele?: boolean | KebelesDefaultArgs<ExtArgs>
    kebeleMender?: boolean | KebeleMendersDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      profile: Prisma.$ProfilesPayload<ExtArgs> | null
      adress: Prisma.$AddressPayload<ExtArgs>
      kebele: Prisma.$KebelesPayload<ExtArgs>
      kebeleMender: Prisma.$KebeleMendersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      phone: string
      password: string
      role: $Enums.ROLES
      activeStatus: $Enums.ACTIVESTATUS
      kebeleId: number
      adressId: number
      kebeleMenderId: number
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    profile<T extends Users$profileArgs<ExtArgs> = {}>(args?: Subset<T, Users$profileArgs<ExtArgs>>): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    adress<T extends AddressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AddressDefaultArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    kebele<T extends KebelesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KebelesDefaultArgs<ExtArgs>>): Prisma__KebelesClient<$Result.GetResult<Prisma.$KebelesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    kebeleMender<T extends KebeleMendersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, KebeleMendersDefaultArgs<ExtArgs>>): Prisma__KebeleMendersClient<$Result.GetResult<Prisma.$KebeleMendersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly email: FieldRef<"Users", 'String'>
    readonly phone: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly role: FieldRef<"Users", 'ROLES'>
    readonly activeStatus: FieldRef<"Users", 'ACTIVESTATUS'>
    readonly kebeleId: FieldRef<"Users", 'Int'>
    readonly adressId: FieldRef<"Users", 'Int'>
    readonly kebeleMenderId: FieldRef<"Users", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.profile
   */
  export type Users$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    where?: ProfilesWhereInput
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
  }



  /**
   * Model Profiles
   */

  export type AggregateProfiles = {
    _count: ProfilesCountAggregateOutputType | null
    _avg: ProfilesAvgAggregateOutputType | null
    _sum: ProfilesSumAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  export type ProfilesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfilesSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type ProfilesMinAggregateOutputType = {
    id: number | null
    userId: number | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    gender: $Enums.GENDER | null
    imageUrl: string | null
  }

  export type ProfilesMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    gender: $Enums.GENDER | null
    imageUrl: string | null
  }

  export type ProfilesCountAggregateOutputType = {
    id: number
    userId: number
    firstName: number
    middleName: number
    lastName: number
    gender: number
    imageUrl: number
    _all: number
  }


  export type ProfilesAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfilesSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type ProfilesMinAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    gender?: true
    imageUrl?: true
  }

  export type ProfilesMaxAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    gender?: true
    imageUrl?: true
  }

  export type ProfilesCountAggregateInputType = {
    id?: true
    userId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    gender?: true
    imageUrl?: true
    _all?: true
  }

  export type ProfilesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to aggregate.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfilesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfilesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfilesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilesMaxAggregateInputType
  }

  export type GetProfilesAggregateType<T extends ProfilesAggregateArgs> = {
        [P in keyof T & keyof AggregateProfiles]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfiles[P]>
      : GetScalarType<T[P], AggregateProfiles[P]>
  }




  export type ProfilesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilesWhereInput
    orderBy?: ProfilesOrderByWithAggregationInput | ProfilesOrderByWithAggregationInput[]
    by: ProfilesScalarFieldEnum[] | ProfilesScalarFieldEnum
    having?: ProfilesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilesCountAggregateInputType | true
    _avg?: ProfilesAvgAggregateInputType
    _sum?: ProfilesSumAggregateInputType
    _min?: ProfilesMinAggregateInputType
    _max?: ProfilesMaxAggregateInputType
  }

  export type ProfilesGroupByOutputType = {
    id: number
    userId: number
    firstName: string
    middleName: string
    lastName: string
    gender: $Enums.GENDER
    imageUrl: string
    _count: ProfilesCountAggregateOutputType | null
    _avg: ProfilesAvgAggregateOutputType | null
    _sum: ProfilesSumAggregateOutputType | null
    _min: ProfilesMinAggregateOutputType | null
    _max: ProfilesMaxAggregateOutputType | null
  }

  type GetProfilesGroupByPayload<T extends ProfilesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilesGroupByOutputType[P]>
        }
      >
    >


  export type ProfilesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    gender?: boolean
    imageUrl?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profiles"]>

  export type ProfilesSelectScalar = {
    id?: boolean
    userId?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    gender?: boolean
    imageUrl?: boolean
  }

  export type ProfilesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }


  export type $ProfilesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profiles"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      firstName: string
      middleName: string
      lastName: string
      gender: $Enums.GENDER
      imageUrl: string
    }, ExtArgs["result"]["profiles"]>
    composites: {}
  }


  type ProfilesGetPayload<S extends boolean | null | undefined | ProfilesDefaultArgs> = $Result.GetResult<Prisma.$ProfilesPayload, S>

  type ProfilesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProfilesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProfilesCountAggregateInputType | true
    }

  export interface ProfilesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profiles'], meta: { name: 'Profiles' } }
    /**
     * Find zero or one Profiles that matches the filter.
     * @param {ProfilesFindUniqueArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfilesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesFindUniqueArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Profiles that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProfilesFindUniqueOrThrowArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProfilesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindFirstArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfilesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesFindFirstArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Profiles that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindFirstOrThrowArgs} args - Arguments to find a Profiles
     * @example
     * // Get one Profiles
     * const profiles = await prisma.profiles.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProfilesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profiles.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profiles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilesWithIdOnly = await prisma.profiles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProfilesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Profiles.
     * @param {ProfilesCreateArgs} args - Arguments to create a Profiles.
     * @example
     * // Create one Profiles
     * const Profiles = await prisma.profiles.create({
     *   data: {
     *     // ... data to create a Profiles
     *   }
     * })
     * 
    **/
    create<T extends ProfilesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesCreateArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Profiles.
     *     @param {ProfilesCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profiles = await prisma.profiles.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfilesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Profiles.
     * @param {ProfilesDeleteArgs} args - Arguments to delete one Profiles.
     * @example
     * // Delete one Profiles
     * const Profiles = await prisma.profiles.delete({
     *   where: {
     *     // ... filter to delete one Profiles
     *   }
     * })
     * 
    **/
    delete<T extends ProfilesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesDeleteArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Profiles.
     * @param {ProfilesUpdateArgs} args - Arguments to update one Profiles.
     * @example
     * // Update one Profiles
     * const profiles = await prisma.profiles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfilesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesUpdateArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Profiles.
     * @param {ProfilesDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profiles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfilesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProfilesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profiles = await prisma.profiles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfilesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Profiles.
     * @param {ProfilesUpsertArgs} args - Arguments to update or create a Profiles.
     * @example
     * // Update or create a Profiles
     * const profiles = await prisma.profiles.upsert({
     *   create: {
     *     // ... data to create a Profiles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profiles we want to update
     *   }
     * })
    **/
    upsert<T extends ProfilesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProfilesUpsertArgs<ExtArgs>>
    ): Prisma__ProfilesClient<$Result.GetResult<Prisma.$ProfilesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profiles.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfilesCountArgs>(
      args?: Subset<T, ProfilesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilesAggregateArgs>(args: Subset<T, ProfilesAggregateArgs>): Prisma.PrismaPromise<GetProfilesAggregateType<T>>

    /**
     * Group by Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilesGroupByArgs['orderBy'] }
        : { orderBy?: ProfilesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profiles model
   */
  readonly fields: ProfilesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profiles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfilesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Profiles model
   */ 
  interface ProfilesFieldRefs {
    readonly id: FieldRef<"Profiles", 'Int'>
    readonly userId: FieldRef<"Profiles", 'Int'>
    readonly firstName: FieldRef<"Profiles", 'String'>
    readonly middleName: FieldRef<"Profiles", 'String'>
    readonly lastName: FieldRef<"Profiles", 'String'>
    readonly gender: FieldRef<"Profiles", 'GENDER'>
    readonly imageUrl: FieldRef<"Profiles", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Profiles findUnique
   */
  export type ProfilesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles findUniqueOrThrow
   */
  export type ProfilesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles findFirst
   */
  export type ProfilesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }


  /**
   * Profiles findFirstOrThrow
   */
  export type ProfilesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }


  /**
   * Profiles findMany
   */
  export type ProfilesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfilesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfilesOrderByWithRelationInput | ProfilesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfilesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfilesScalarFieldEnum | ProfilesScalarFieldEnum[]
  }


  /**
   * Profiles create
   */
  export type ProfilesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * The data needed to create a Profiles.
     */
    data: XOR<ProfilesCreateInput, ProfilesUncheckedCreateInput>
  }


  /**
   * Profiles createMany
   */
  export type ProfilesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfilesCreateManyInput | ProfilesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Profiles update
   */
  export type ProfilesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * The data needed to update a Profiles.
     */
    data: XOR<ProfilesUpdateInput, ProfilesUncheckedUpdateInput>
    /**
     * Choose, which Profiles to update.
     */
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles updateMany
   */
  export type ProfilesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfilesUpdateManyMutationInput, ProfilesUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfilesWhereInput
  }


  /**
   * Profiles upsert
   */
  export type ProfilesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * The filter to search for the Profiles to update in case it exists.
     */
    where: ProfilesWhereUniqueInput
    /**
     * In case the Profiles found by the `where` argument doesn't exist, create a new Profiles with this data.
     */
    create: XOR<ProfilesCreateInput, ProfilesUncheckedCreateInput>
    /**
     * In case the Profiles was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfilesUpdateInput, ProfilesUncheckedUpdateInput>
  }


  /**
   * Profiles delete
   */
  export type ProfilesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
    /**
     * Filter which Profiles to delete.
     */
    where: ProfilesWhereUniqueInput
  }


  /**
   * Profiles deleteMany
   */
  export type ProfilesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfilesWhereInput
  }


  /**
   * Profiles without action
   */
  export type ProfilesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profiles
     */
    select?: ProfilesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProfilesInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AddressScalarFieldEnum: {
    id: 'id',
    region: 'region',
    zone: 'zone',
    wereda: 'wereda',
    city: 'city'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const KebelesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    addressId: 'addressId'
  };

  export type KebelesScalarFieldEnum = (typeof KebelesScalarFieldEnum)[keyof typeof KebelesScalarFieldEnum]


  export const KebeleMendersScalarFieldEnum: {
    id: 'id',
    kebeleId: 'kebeleId',
    menderName: 'menderName'
  };

  export type KebeleMendersScalarFieldEnum = (typeof KebeleMendersScalarFieldEnum)[keyof typeof KebeleMendersScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phone: 'phone',
    password: 'password',
    role: 'role',
    activeStatus: 'activeStatus',
    kebeleId: 'kebeleId',
    adressId: 'adressId',
    kebeleMenderId: 'kebeleMenderId'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ProfilesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    gender: 'gender',
    imageUrl: 'imageUrl'
  };

  export type ProfilesScalarFieldEnum = (typeof ProfilesScalarFieldEnum)[keyof typeof ProfilesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'ROLES'
   */
  export type EnumROLESFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ROLES'>
    


  /**
   * Reference to a field of type 'ACTIVESTATUS'
   */
  export type EnumACTIVESTATUSFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ACTIVESTATUS'>
    


  /**
   * Reference to a field of type 'GENDER'
   */
  export type EnumGENDERFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'GENDER'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: IntFilter<"Address"> | number
    region?: StringFilter<"Address"> | string
    zone?: StringFilter<"Address"> | string
    wereda?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    kebele?: KebelesListRelationFilter
    users?: UsersListRelationFilter
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    region?: SortOrder
    zone?: SortOrder
    wereda?: SortOrder
    city?: SortOrder
    kebele?: KebelesOrderByRelationAggregateInput
    users?: UsersOrderByRelationAggregateInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    region?: StringFilter<"Address"> | string
    zone?: StringFilter<"Address"> | string
    wereda?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    kebele?: KebelesListRelationFilter
    users?: UsersListRelationFilter
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    region?: SortOrder
    zone?: SortOrder
    wereda?: SortOrder
    city?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Address"> | number
    region?: StringWithAggregatesFilter<"Address"> | string
    zone?: StringWithAggregatesFilter<"Address"> | string
    wereda?: StringWithAggregatesFilter<"Address"> | string
    city?: StringWithAggregatesFilter<"Address"> | string
  }

  export type KebelesWhereInput = {
    AND?: KebelesWhereInput | KebelesWhereInput[]
    OR?: KebelesWhereInput[]
    NOT?: KebelesWhereInput | KebelesWhereInput[]
    id?: IntFilter<"Kebeles"> | number
    name?: StringFilter<"Kebeles"> | string
    addressId?: IntFilter<"Kebeles"> | number
    address?: XOR<AddressRelationFilter, AddressWhereInput>
    meder?: KebeleMendersListRelationFilter
    users?: UsersListRelationFilter
  }

  export type KebelesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    addressId?: SortOrder
    address?: AddressOrderByWithRelationInput
    meder?: KebeleMendersOrderByRelationAggregateInput
    users?: UsersOrderByRelationAggregateInput
  }

  export type KebelesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KebelesWhereInput | KebelesWhereInput[]
    OR?: KebelesWhereInput[]
    NOT?: KebelesWhereInput | KebelesWhereInput[]
    name?: StringFilter<"Kebeles"> | string
    addressId?: IntFilter<"Kebeles"> | number
    address?: XOR<AddressRelationFilter, AddressWhereInput>
    meder?: KebeleMendersListRelationFilter
    users?: UsersListRelationFilter
  }, "id">

  export type KebelesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    addressId?: SortOrder
    _count?: KebelesCountOrderByAggregateInput
    _avg?: KebelesAvgOrderByAggregateInput
    _max?: KebelesMaxOrderByAggregateInput
    _min?: KebelesMinOrderByAggregateInput
    _sum?: KebelesSumOrderByAggregateInput
  }

  export type KebelesScalarWhereWithAggregatesInput = {
    AND?: KebelesScalarWhereWithAggregatesInput | KebelesScalarWhereWithAggregatesInput[]
    OR?: KebelesScalarWhereWithAggregatesInput[]
    NOT?: KebelesScalarWhereWithAggregatesInput | KebelesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Kebeles"> | number
    name?: StringWithAggregatesFilter<"Kebeles"> | string
    addressId?: IntWithAggregatesFilter<"Kebeles"> | number
  }

  export type KebeleMendersWhereInput = {
    AND?: KebeleMendersWhereInput | KebeleMendersWhereInput[]
    OR?: KebeleMendersWhereInput[]
    NOT?: KebeleMendersWhereInput | KebeleMendersWhereInput[]
    id?: IntFilter<"KebeleMenders"> | number
    kebeleId?: IntFilter<"KebeleMenders"> | number
    menderName?: StringFilter<"KebeleMenders"> | string
    kebele?: XOR<KebelesRelationFilter, KebelesWhereInput>
    users?: UsersListRelationFilter
  }

  export type KebeleMendersOrderByWithRelationInput = {
    id?: SortOrder
    kebeleId?: SortOrder
    menderName?: SortOrder
    kebele?: KebelesOrderByWithRelationInput
    users?: UsersOrderByRelationAggregateInput
  }

  export type KebeleMendersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KebeleMendersWhereInput | KebeleMendersWhereInput[]
    OR?: KebeleMendersWhereInput[]
    NOT?: KebeleMendersWhereInput | KebeleMendersWhereInput[]
    kebeleId?: IntFilter<"KebeleMenders"> | number
    menderName?: StringFilter<"KebeleMenders"> | string
    kebele?: XOR<KebelesRelationFilter, KebelesWhereInput>
    users?: UsersListRelationFilter
  }, "id">

  export type KebeleMendersOrderByWithAggregationInput = {
    id?: SortOrder
    kebeleId?: SortOrder
    menderName?: SortOrder
    _count?: KebeleMendersCountOrderByAggregateInput
    _avg?: KebeleMendersAvgOrderByAggregateInput
    _max?: KebeleMendersMaxOrderByAggregateInput
    _min?: KebeleMendersMinOrderByAggregateInput
    _sum?: KebeleMendersSumOrderByAggregateInput
  }

  export type KebeleMendersScalarWhereWithAggregatesInput = {
    AND?: KebeleMendersScalarWhereWithAggregatesInput | KebeleMendersScalarWhereWithAggregatesInput[]
    OR?: KebeleMendersScalarWhereWithAggregatesInput[]
    NOT?: KebeleMendersScalarWhereWithAggregatesInput | KebeleMendersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KebeleMenders"> | number
    kebeleId?: IntWithAggregatesFilter<"KebeleMenders"> | number
    menderName?: StringWithAggregatesFilter<"KebeleMenders"> | string
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    email?: StringFilter<"Users"> | string
    phone?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    role?: EnumROLESFilter<"Users"> | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFilter<"Users"> | $Enums.ACTIVESTATUS
    kebeleId?: IntFilter<"Users"> | number
    adressId?: IntFilter<"Users"> | number
    kebeleMenderId?: IntFilter<"Users"> | number
    profile?: XOR<ProfilesNullableRelationFilter, ProfilesWhereInput> | null
    adress?: XOR<AddressRelationFilter, AddressWhereInput>
    kebele?: XOR<KebelesRelationFilter, KebelesWhereInput>
    kebeleMender?: XOR<KebeleMendersRelationFilter, KebeleMendersWhereInput>
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    role?: SortOrder
    activeStatus?: SortOrder
    kebeleId?: SortOrder
    adressId?: SortOrder
    kebeleMenderId?: SortOrder
    profile?: ProfilesOrderByWithRelationInput
    adress?: AddressOrderByWithRelationInput
    kebele?: KebelesOrderByWithRelationInput
    kebeleMender?: KebeleMendersOrderByWithRelationInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    phone?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    password?: StringFilter<"Users"> | string
    role?: EnumROLESFilter<"Users"> | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFilter<"Users"> | $Enums.ACTIVESTATUS
    kebeleId?: IntFilter<"Users"> | number
    adressId?: IntFilter<"Users"> | number
    kebeleMenderId?: IntFilter<"Users"> | number
    profile?: XOR<ProfilesNullableRelationFilter, ProfilesWhereInput> | null
    adress?: XOR<AddressRelationFilter, AddressWhereInput>
    kebele?: XOR<KebelesRelationFilter, KebelesWhereInput>
    kebeleMender?: XOR<KebeleMendersRelationFilter, KebeleMendersWhereInput>
  }, "id" | "email" | "phone">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    role?: SortOrder
    activeStatus?: SortOrder
    kebeleId?: SortOrder
    adressId?: SortOrder
    kebeleMenderId?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    email?: StringWithAggregatesFilter<"Users"> | string
    phone?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    role?: EnumROLESWithAggregatesFilter<"Users"> | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSWithAggregatesFilter<"Users"> | $Enums.ACTIVESTATUS
    kebeleId?: IntWithAggregatesFilter<"Users"> | number
    adressId?: IntWithAggregatesFilter<"Users"> | number
    kebeleMenderId?: IntWithAggregatesFilter<"Users"> | number
  }

  export type ProfilesWhereInput = {
    AND?: ProfilesWhereInput | ProfilesWhereInput[]
    OR?: ProfilesWhereInput[]
    NOT?: ProfilesWhereInput | ProfilesWhereInput[]
    id?: IntFilter<"Profiles"> | number
    userId?: IntFilter<"Profiles"> | number
    firstName?: StringFilter<"Profiles"> | string
    middleName?: StringFilter<"Profiles"> | string
    lastName?: StringFilter<"Profiles"> | string
    gender?: EnumGENDERFilter<"Profiles"> | $Enums.GENDER
    imageUrl?: StringFilter<"Profiles"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }

  export type ProfilesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    imageUrl?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type ProfilesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: number
    AND?: ProfilesWhereInput | ProfilesWhereInput[]
    OR?: ProfilesWhereInput[]
    NOT?: ProfilesWhereInput | ProfilesWhereInput[]
    firstName?: StringFilter<"Profiles"> | string
    middleName?: StringFilter<"Profiles"> | string
    lastName?: StringFilter<"Profiles"> | string
    gender?: EnumGENDERFilter<"Profiles"> | $Enums.GENDER
    imageUrl?: StringFilter<"Profiles"> | string
    user?: XOR<UsersRelationFilter, UsersWhereInput>
  }, "id" | "userId">

  export type ProfilesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    imageUrl?: SortOrder
    _count?: ProfilesCountOrderByAggregateInput
    _avg?: ProfilesAvgOrderByAggregateInput
    _max?: ProfilesMaxOrderByAggregateInput
    _min?: ProfilesMinOrderByAggregateInput
    _sum?: ProfilesSumOrderByAggregateInput
  }

  export type ProfilesScalarWhereWithAggregatesInput = {
    AND?: ProfilesScalarWhereWithAggregatesInput | ProfilesScalarWhereWithAggregatesInput[]
    OR?: ProfilesScalarWhereWithAggregatesInput[]
    NOT?: ProfilesScalarWhereWithAggregatesInput | ProfilesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Profiles"> | number
    userId?: IntWithAggregatesFilter<"Profiles"> | number
    firstName?: StringWithAggregatesFilter<"Profiles"> | string
    middleName?: StringWithAggregatesFilter<"Profiles"> | string
    lastName?: StringWithAggregatesFilter<"Profiles"> | string
    gender?: EnumGENDERWithAggregatesFilter<"Profiles"> | $Enums.GENDER
    imageUrl?: StringWithAggregatesFilter<"Profiles"> | string
  }

  export type AddressCreateInput = {
    region: string
    zone: string
    wereda: string
    city: string
    kebele?: KebelesCreateNestedManyWithoutAddressInput
    users?: UsersCreateNestedManyWithoutAdressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: number
    region: string
    zone: string
    wereda: string
    city: string
    kebele?: KebelesUncheckedCreateNestedManyWithoutAddressInput
    users?: UsersUncheckedCreateNestedManyWithoutAdressInput
  }

  export type AddressUpdateInput = {
    region?: StringFieldUpdateOperationsInput | string
    zone?: StringFieldUpdateOperationsInput | string
    wereda?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    kebele?: KebelesUpdateManyWithoutAddressNestedInput
    users?: UsersUpdateManyWithoutAdressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    zone?: StringFieldUpdateOperationsInput | string
    wereda?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    kebele?: KebelesUncheckedUpdateManyWithoutAddressNestedInput
    users?: UsersUncheckedUpdateManyWithoutAdressNestedInput
  }

  export type AddressCreateManyInput = {
    id?: number
    region: string
    zone: string
    wereda: string
    city: string
  }

  export type AddressUpdateManyMutationInput = {
    region?: StringFieldUpdateOperationsInput | string
    zone?: StringFieldUpdateOperationsInput | string
    wereda?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    zone?: StringFieldUpdateOperationsInput | string
    wereda?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
  }

  export type KebelesCreateInput = {
    name: string
    address: AddressCreateNestedOneWithoutKebeleInput
    meder?: KebeleMendersCreateNestedManyWithoutKebeleInput
    users?: UsersCreateNestedManyWithoutKebeleInput
  }

  export type KebelesUncheckedCreateInput = {
    id?: number
    name: string
    addressId: number
    meder?: KebeleMendersUncheckedCreateNestedManyWithoutKebeleInput
    users?: UsersUncheckedCreateNestedManyWithoutKebeleInput
  }

  export type KebelesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: AddressUpdateOneRequiredWithoutKebeleNestedInput
    meder?: KebeleMendersUpdateManyWithoutKebeleNestedInput
    users?: UsersUpdateManyWithoutKebeleNestedInput
  }

  export type KebelesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    addressId?: IntFieldUpdateOperationsInput | number
    meder?: KebeleMendersUncheckedUpdateManyWithoutKebeleNestedInput
    users?: UsersUncheckedUpdateManyWithoutKebeleNestedInput
  }

  export type KebelesCreateManyInput = {
    id?: number
    name: string
    addressId: number
  }

  export type KebelesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type KebelesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    addressId?: IntFieldUpdateOperationsInput | number
  }

  export type KebeleMendersCreateInput = {
    menderName: string
    kebele: KebelesCreateNestedOneWithoutMederInput
    users?: UsersCreateNestedManyWithoutKebeleMenderInput
  }

  export type KebeleMendersUncheckedCreateInput = {
    id?: number
    kebeleId: number
    menderName: string
    users?: UsersUncheckedCreateNestedManyWithoutKebeleMenderInput
  }

  export type KebeleMendersUpdateInput = {
    menderName?: StringFieldUpdateOperationsInput | string
    kebele?: KebelesUpdateOneRequiredWithoutMederNestedInput
    users?: UsersUpdateManyWithoutKebeleMenderNestedInput
  }

  export type KebeleMendersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kebeleId?: IntFieldUpdateOperationsInput | number
    menderName?: StringFieldUpdateOperationsInput | string
    users?: UsersUncheckedUpdateManyWithoutKebeleMenderNestedInput
  }

  export type KebeleMendersCreateManyInput = {
    id?: number
    kebeleId: number
    menderName: string
  }

  export type KebeleMendersUpdateManyMutationInput = {
    menderName?: StringFieldUpdateOperationsInput | string
  }

  export type KebeleMendersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kebeleId?: IntFieldUpdateOperationsInput | number
    menderName?: StringFieldUpdateOperationsInput | string
  }

  export type UsersCreateInput = {
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    profile?: ProfilesCreateNestedOneWithoutUserInput
    adress: AddressCreateNestedOneWithoutUsersInput
    kebele: KebelesCreateNestedOneWithoutUsersInput
    kebeleMender: KebeleMendersCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    kebeleId: number
    adressId: number
    kebeleMenderId: number
    profile?: ProfilesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UsersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    profile?: ProfilesUpdateOneWithoutUserNestedInput
    adress?: AddressUpdateOneRequiredWithoutUsersNestedInput
    kebele?: KebelesUpdateOneRequiredWithoutUsersNestedInput
    kebeleMender?: KebeleMendersUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    kebeleId?: IntFieldUpdateOperationsInput | number
    adressId?: IntFieldUpdateOperationsInput | number
    kebeleMenderId?: IntFieldUpdateOperationsInput | number
    profile?: ProfilesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    kebeleId: number
    adressId: number
    kebeleMenderId: number
  }

  export type UsersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    kebeleId?: IntFieldUpdateOperationsInput | number
    adressId?: IntFieldUpdateOperationsInput | number
    kebeleMenderId?: IntFieldUpdateOperationsInput | number
  }

  export type ProfilesCreateInput = {
    firstName: string
    middleName: string
    lastName: string
    gender: $Enums.GENDER
    imageUrl: string
    user: UsersCreateNestedOneWithoutProfileInput
  }

  export type ProfilesUncheckedCreateInput = {
    id?: number
    userId: number
    firstName: string
    middleName: string
    lastName: string
    gender: $Enums.GENDER
    imageUrl: string
  }

  export type ProfilesUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGENDERFieldUpdateOperationsInput | $Enums.GENDER
    imageUrl?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfilesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGENDERFieldUpdateOperationsInput | $Enums.GENDER
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilesCreateManyInput = {
    id?: number
    userId: number
    firstName: string
    middleName: string
    lastName: string
    gender: $Enums.GENDER
    imageUrl: string
  }

  export type ProfilesUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGENDERFieldUpdateOperationsInput | $Enums.GENDER
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGENDERFieldUpdateOperationsInput | $Enums.GENDER
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type KebelesListRelationFilter = {
    every?: KebelesWhereInput
    some?: KebelesWhereInput
    none?: KebelesWhereInput
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type KebelesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    zone?: SortOrder
    wereda?: SortOrder
    city?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    zone?: SortOrder
    wereda?: SortOrder
    city?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    region?: SortOrder
    zone?: SortOrder
    wereda?: SortOrder
    city?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type AddressRelationFilter = {
    is?: AddressWhereInput
    isNot?: AddressWhereInput
  }

  export type KebeleMendersListRelationFilter = {
    every?: KebeleMendersWhereInput
    some?: KebeleMendersWhereInput
    none?: KebeleMendersWhereInput
  }

  export type KebeleMendersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type KebelesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    addressId?: SortOrder
  }

  export type KebelesAvgOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
  }

  export type KebelesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    addressId?: SortOrder
  }

  export type KebelesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    addressId?: SortOrder
  }

  export type KebelesSumOrderByAggregateInput = {
    id?: SortOrder
    addressId?: SortOrder
  }

  export type KebelesRelationFilter = {
    is?: KebelesWhereInput
    isNot?: KebelesWhereInput
  }

  export type KebeleMendersCountOrderByAggregateInput = {
    id?: SortOrder
    kebeleId?: SortOrder
    menderName?: SortOrder
  }

  export type KebeleMendersAvgOrderByAggregateInput = {
    id?: SortOrder
    kebeleId?: SortOrder
  }

  export type KebeleMendersMaxOrderByAggregateInput = {
    id?: SortOrder
    kebeleId?: SortOrder
    menderName?: SortOrder
  }

  export type KebeleMendersMinOrderByAggregateInput = {
    id?: SortOrder
    kebeleId?: SortOrder
    menderName?: SortOrder
  }

  export type KebeleMendersSumOrderByAggregateInput = {
    id?: SortOrder
    kebeleId?: SortOrder
  }

  export type EnumROLESFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLES | EnumROLESFieldRefInput<$PrismaModel>
    in?: $Enums.ROLES[]
    notIn?: $Enums.ROLES[]
    not?: NestedEnumROLESFilter<$PrismaModel> | $Enums.ROLES
  }

  export type EnumACTIVESTATUSFilter<$PrismaModel = never> = {
    equals?: $Enums.ACTIVESTATUS | EnumACTIVESTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.ACTIVESTATUS[]
    notIn?: $Enums.ACTIVESTATUS[]
    not?: NestedEnumACTIVESTATUSFilter<$PrismaModel> | $Enums.ACTIVESTATUS
  }

  export type ProfilesNullableRelationFilter = {
    is?: ProfilesWhereInput | null
    isNot?: ProfilesWhereInput | null
  }

  export type KebeleMendersRelationFilter = {
    is?: KebeleMendersWhereInput
    isNot?: KebeleMendersWhereInput
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    role?: SortOrder
    activeStatus?: SortOrder
    kebeleId?: SortOrder
    adressId?: SortOrder
    kebeleMenderId?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    kebeleId?: SortOrder
    adressId?: SortOrder
    kebeleMenderId?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    role?: SortOrder
    activeStatus?: SortOrder
    kebeleId?: SortOrder
    adressId?: SortOrder
    kebeleMenderId?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    password?: SortOrder
    role?: SortOrder
    activeStatus?: SortOrder
    kebeleId?: SortOrder
    adressId?: SortOrder
    kebeleMenderId?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    kebeleId?: SortOrder
    adressId?: SortOrder
    kebeleMenderId?: SortOrder
  }

  export type EnumROLESWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLES | EnumROLESFieldRefInput<$PrismaModel>
    in?: $Enums.ROLES[]
    notIn?: $Enums.ROLES[]
    not?: NestedEnumROLESWithAggregatesFilter<$PrismaModel> | $Enums.ROLES
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumROLESFilter<$PrismaModel>
    _max?: NestedEnumROLESFilter<$PrismaModel>
  }

  export type EnumACTIVESTATUSWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ACTIVESTATUS | EnumACTIVESTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.ACTIVESTATUS[]
    notIn?: $Enums.ACTIVESTATUS[]
    not?: NestedEnumACTIVESTATUSWithAggregatesFilter<$PrismaModel> | $Enums.ACTIVESTATUS
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumACTIVESTATUSFilter<$PrismaModel>
    _max?: NestedEnumACTIVESTATUSFilter<$PrismaModel>
  }

  export type EnumGENDERFilter<$PrismaModel = never> = {
    equals?: $Enums.GENDER | EnumGENDERFieldRefInput<$PrismaModel>
    in?: $Enums.GENDER[]
    notIn?: $Enums.GENDER[]
    not?: NestedEnumGENDERFilter<$PrismaModel> | $Enums.GENDER
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type ProfilesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    imageUrl?: SortOrder
  }

  export type ProfilesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type ProfilesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    imageUrl?: SortOrder
  }

  export type ProfilesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    imageUrl?: SortOrder
  }

  export type ProfilesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumGENDERWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GENDER | EnumGENDERFieldRefInput<$PrismaModel>
    in?: $Enums.GENDER[]
    notIn?: $Enums.GENDER[]
    not?: NestedEnumGENDERWithAggregatesFilter<$PrismaModel> | $Enums.GENDER
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGENDERFilter<$PrismaModel>
    _max?: NestedEnumGENDERFilter<$PrismaModel>
  }

  export type KebelesCreateNestedManyWithoutAddressInput = {
    create?: XOR<KebelesCreateWithoutAddressInput, KebelesUncheckedCreateWithoutAddressInput> | KebelesCreateWithoutAddressInput[] | KebelesUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: KebelesCreateOrConnectWithoutAddressInput | KebelesCreateOrConnectWithoutAddressInput[]
    createMany?: KebelesCreateManyAddressInputEnvelope
    connect?: KebelesWhereUniqueInput | KebelesWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutAdressInput = {
    create?: XOR<UsersCreateWithoutAdressInput, UsersUncheckedCreateWithoutAdressInput> | UsersCreateWithoutAdressInput[] | UsersUncheckedCreateWithoutAdressInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAdressInput | UsersCreateOrConnectWithoutAdressInput[]
    createMany?: UsersCreateManyAdressInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type KebelesUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<KebelesCreateWithoutAddressInput, KebelesUncheckedCreateWithoutAddressInput> | KebelesCreateWithoutAddressInput[] | KebelesUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: KebelesCreateOrConnectWithoutAddressInput | KebelesCreateOrConnectWithoutAddressInput[]
    createMany?: KebelesCreateManyAddressInputEnvelope
    connect?: KebelesWhereUniqueInput | KebelesWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutAdressInput = {
    create?: XOR<UsersCreateWithoutAdressInput, UsersUncheckedCreateWithoutAdressInput> | UsersCreateWithoutAdressInput[] | UsersUncheckedCreateWithoutAdressInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAdressInput | UsersCreateOrConnectWithoutAdressInput[]
    createMany?: UsersCreateManyAdressInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type KebelesUpdateManyWithoutAddressNestedInput = {
    create?: XOR<KebelesCreateWithoutAddressInput, KebelesUncheckedCreateWithoutAddressInput> | KebelesCreateWithoutAddressInput[] | KebelesUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: KebelesCreateOrConnectWithoutAddressInput | KebelesCreateOrConnectWithoutAddressInput[]
    upsert?: KebelesUpsertWithWhereUniqueWithoutAddressInput | KebelesUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: KebelesCreateManyAddressInputEnvelope
    set?: KebelesWhereUniqueInput | KebelesWhereUniqueInput[]
    disconnect?: KebelesWhereUniqueInput | KebelesWhereUniqueInput[]
    delete?: KebelesWhereUniqueInput | KebelesWhereUniqueInput[]
    connect?: KebelesWhereUniqueInput | KebelesWhereUniqueInput[]
    update?: KebelesUpdateWithWhereUniqueWithoutAddressInput | KebelesUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: KebelesUpdateManyWithWhereWithoutAddressInput | KebelesUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: KebelesScalarWhereInput | KebelesScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutAdressNestedInput = {
    create?: XOR<UsersCreateWithoutAdressInput, UsersUncheckedCreateWithoutAdressInput> | UsersCreateWithoutAdressInput[] | UsersUncheckedCreateWithoutAdressInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAdressInput | UsersCreateOrConnectWithoutAdressInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutAdressInput | UsersUpsertWithWhereUniqueWithoutAdressInput[]
    createMany?: UsersCreateManyAdressInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutAdressInput | UsersUpdateWithWhereUniqueWithoutAdressInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutAdressInput | UsersUpdateManyWithWhereWithoutAdressInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type KebelesUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<KebelesCreateWithoutAddressInput, KebelesUncheckedCreateWithoutAddressInput> | KebelesCreateWithoutAddressInput[] | KebelesUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: KebelesCreateOrConnectWithoutAddressInput | KebelesCreateOrConnectWithoutAddressInput[]
    upsert?: KebelesUpsertWithWhereUniqueWithoutAddressInput | KebelesUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: KebelesCreateManyAddressInputEnvelope
    set?: KebelesWhereUniqueInput | KebelesWhereUniqueInput[]
    disconnect?: KebelesWhereUniqueInput | KebelesWhereUniqueInput[]
    delete?: KebelesWhereUniqueInput | KebelesWhereUniqueInput[]
    connect?: KebelesWhereUniqueInput | KebelesWhereUniqueInput[]
    update?: KebelesUpdateWithWhereUniqueWithoutAddressInput | KebelesUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: KebelesUpdateManyWithWhereWithoutAddressInput | KebelesUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: KebelesScalarWhereInput | KebelesScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutAdressNestedInput = {
    create?: XOR<UsersCreateWithoutAdressInput, UsersUncheckedCreateWithoutAdressInput> | UsersCreateWithoutAdressInput[] | UsersUncheckedCreateWithoutAdressInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAdressInput | UsersCreateOrConnectWithoutAdressInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutAdressInput | UsersUpsertWithWhereUniqueWithoutAdressInput[]
    createMany?: UsersCreateManyAdressInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutAdressInput | UsersUpdateWithWhereUniqueWithoutAdressInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutAdressInput | UsersUpdateManyWithWhereWithoutAdressInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type AddressCreateNestedOneWithoutKebeleInput = {
    create?: XOR<AddressCreateWithoutKebeleInput, AddressUncheckedCreateWithoutKebeleInput>
    connectOrCreate?: AddressCreateOrConnectWithoutKebeleInput
    connect?: AddressWhereUniqueInput
  }

  export type KebeleMendersCreateNestedManyWithoutKebeleInput = {
    create?: XOR<KebeleMendersCreateWithoutKebeleInput, KebeleMendersUncheckedCreateWithoutKebeleInput> | KebeleMendersCreateWithoutKebeleInput[] | KebeleMendersUncheckedCreateWithoutKebeleInput[]
    connectOrCreate?: KebeleMendersCreateOrConnectWithoutKebeleInput | KebeleMendersCreateOrConnectWithoutKebeleInput[]
    createMany?: KebeleMendersCreateManyKebeleInputEnvelope
    connect?: KebeleMendersWhereUniqueInput | KebeleMendersWhereUniqueInput[]
  }

  export type UsersCreateNestedManyWithoutKebeleInput = {
    create?: XOR<UsersCreateWithoutKebeleInput, UsersUncheckedCreateWithoutKebeleInput> | UsersCreateWithoutKebeleInput[] | UsersUncheckedCreateWithoutKebeleInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutKebeleInput | UsersCreateOrConnectWithoutKebeleInput[]
    createMany?: UsersCreateManyKebeleInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type KebeleMendersUncheckedCreateNestedManyWithoutKebeleInput = {
    create?: XOR<KebeleMendersCreateWithoutKebeleInput, KebeleMendersUncheckedCreateWithoutKebeleInput> | KebeleMendersCreateWithoutKebeleInput[] | KebeleMendersUncheckedCreateWithoutKebeleInput[]
    connectOrCreate?: KebeleMendersCreateOrConnectWithoutKebeleInput | KebeleMendersCreateOrConnectWithoutKebeleInput[]
    createMany?: KebeleMendersCreateManyKebeleInputEnvelope
    connect?: KebeleMendersWhereUniqueInput | KebeleMendersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutKebeleInput = {
    create?: XOR<UsersCreateWithoutKebeleInput, UsersUncheckedCreateWithoutKebeleInput> | UsersCreateWithoutKebeleInput[] | UsersUncheckedCreateWithoutKebeleInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutKebeleInput | UsersCreateOrConnectWithoutKebeleInput[]
    createMany?: UsersCreateManyKebeleInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type AddressUpdateOneRequiredWithoutKebeleNestedInput = {
    create?: XOR<AddressCreateWithoutKebeleInput, AddressUncheckedCreateWithoutKebeleInput>
    connectOrCreate?: AddressCreateOrConnectWithoutKebeleInput
    upsert?: AddressUpsertWithoutKebeleInput
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutKebeleInput, AddressUpdateWithoutKebeleInput>, AddressUncheckedUpdateWithoutKebeleInput>
  }

  export type KebeleMendersUpdateManyWithoutKebeleNestedInput = {
    create?: XOR<KebeleMendersCreateWithoutKebeleInput, KebeleMendersUncheckedCreateWithoutKebeleInput> | KebeleMendersCreateWithoutKebeleInput[] | KebeleMendersUncheckedCreateWithoutKebeleInput[]
    connectOrCreate?: KebeleMendersCreateOrConnectWithoutKebeleInput | KebeleMendersCreateOrConnectWithoutKebeleInput[]
    upsert?: KebeleMendersUpsertWithWhereUniqueWithoutKebeleInput | KebeleMendersUpsertWithWhereUniqueWithoutKebeleInput[]
    createMany?: KebeleMendersCreateManyKebeleInputEnvelope
    set?: KebeleMendersWhereUniqueInput | KebeleMendersWhereUniqueInput[]
    disconnect?: KebeleMendersWhereUniqueInput | KebeleMendersWhereUniqueInput[]
    delete?: KebeleMendersWhereUniqueInput | KebeleMendersWhereUniqueInput[]
    connect?: KebeleMendersWhereUniqueInput | KebeleMendersWhereUniqueInput[]
    update?: KebeleMendersUpdateWithWhereUniqueWithoutKebeleInput | KebeleMendersUpdateWithWhereUniqueWithoutKebeleInput[]
    updateMany?: KebeleMendersUpdateManyWithWhereWithoutKebeleInput | KebeleMendersUpdateManyWithWhereWithoutKebeleInput[]
    deleteMany?: KebeleMendersScalarWhereInput | KebeleMendersScalarWhereInput[]
  }

  export type UsersUpdateManyWithoutKebeleNestedInput = {
    create?: XOR<UsersCreateWithoutKebeleInput, UsersUncheckedCreateWithoutKebeleInput> | UsersCreateWithoutKebeleInput[] | UsersUncheckedCreateWithoutKebeleInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutKebeleInput | UsersCreateOrConnectWithoutKebeleInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutKebeleInput | UsersUpsertWithWhereUniqueWithoutKebeleInput[]
    createMany?: UsersCreateManyKebeleInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutKebeleInput | UsersUpdateWithWhereUniqueWithoutKebeleInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutKebeleInput | UsersUpdateManyWithWhereWithoutKebeleInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type KebeleMendersUncheckedUpdateManyWithoutKebeleNestedInput = {
    create?: XOR<KebeleMendersCreateWithoutKebeleInput, KebeleMendersUncheckedCreateWithoutKebeleInput> | KebeleMendersCreateWithoutKebeleInput[] | KebeleMendersUncheckedCreateWithoutKebeleInput[]
    connectOrCreate?: KebeleMendersCreateOrConnectWithoutKebeleInput | KebeleMendersCreateOrConnectWithoutKebeleInput[]
    upsert?: KebeleMendersUpsertWithWhereUniqueWithoutKebeleInput | KebeleMendersUpsertWithWhereUniqueWithoutKebeleInput[]
    createMany?: KebeleMendersCreateManyKebeleInputEnvelope
    set?: KebeleMendersWhereUniqueInput | KebeleMendersWhereUniqueInput[]
    disconnect?: KebeleMendersWhereUniqueInput | KebeleMendersWhereUniqueInput[]
    delete?: KebeleMendersWhereUniqueInput | KebeleMendersWhereUniqueInput[]
    connect?: KebeleMendersWhereUniqueInput | KebeleMendersWhereUniqueInput[]
    update?: KebeleMendersUpdateWithWhereUniqueWithoutKebeleInput | KebeleMendersUpdateWithWhereUniqueWithoutKebeleInput[]
    updateMany?: KebeleMendersUpdateManyWithWhereWithoutKebeleInput | KebeleMendersUpdateManyWithWhereWithoutKebeleInput[]
    deleteMany?: KebeleMendersScalarWhereInput | KebeleMendersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutKebeleNestedInput = {
    create?: XOR<UsersCreateWithoutKebeleInput, UsersUncheckedCreateWithoutKebeleInput> | UsersCreateWithoutKebeleInput[] | UsersUncheckedCreateWithoutKebeleInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutKebeleInput | UsersCreateOrConnectWithoutKebeleInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutKebeleInput | UsersUpsertWithWhereUniqueWithoutKebeleInput[]
    createMany?: UsersCreateManyKebeleInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutKebeleInput | UsersUpdateWithWhereUniqueWithoutKebeleInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutKebeleInput | UsersUpdateManyWithWhereWithoutKebeleInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type KebelesCreateNestedOneWithoutMederInput = {
    create?: XOR<KebelesCreateWithoutMederInput, KebelesUncheckedCreateWithoutMederInput>
    connectOrCreate?: KebelesCreateOrConnectWithoutMederInput
    connect?: KebelesWhereUniqueInput
  }

  export type UsersCreateNestedManyWithoutKebeleMenderInput = {
    create?: XOR<UsersCreateWithoutKebeleMenderInput, UsersUncheckedCreateWithoutKebeleMenderInput> | UsersCreateWithoutKebeleMenderInput[] | UsersUncheckedCreateWithoutKebeleMenderInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutKebeleMenderInput | UsersCreateOrConnectWithoutKebeleMenderInput[]
    createMany?: UsersCreateManyKebeleMenderInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutKebeleMenderInput = {
    create?: XOR<UsersCreateWithoutKebeleMenderInput, UsersUncheckedCreateWithoutKebeleMenderInput> | UsersCreateWithoutKebeleMenderInput[] | UsersUncheckedCreateWithoutKebeleMenderInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutKebeleMenderInput | UsersCreateOrConnectWithoutKebeleMenderInput[]
    createMany?: UsersCreateManyKebeleMenderInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type KebelesUpdateOneRequiredWithoutMederNestedInput = {
    create?: XOR<KebelesCreateWithoutMederInput, KebelesUncheckedCreateWithoutMederInput>
    connectOrCreate?: KebelesCreateOrConnectWithoutMederInput
    upsert?: KebelesUpsertWithoutMederInput
    connect?: KebelesWhereUniqueInput
    update?: XOR<XOR<KebelesUpdateToOneWithWhereWithoutMederInput, KebelesUpdateWithoutMederInput>, KebelesUncheckedUpdateWithoutMederInput>
  }

  export type UsersUpdateManyWithoutKebeleMenderNestedInput = {
    create?: XOR<UsersCreateWithoutKebeleMenderInput, UsersUncheckedCreateWithoutKebeleMenderInput> | UsersCreateWithoutKebeleMenderInput[] | UsersUncheckedCreateWithoutKebeleMenderInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutKebeleMenderInput | UsersCreateOrConnectWithoutKebeleMenderInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutKebeleMenderInput | UsersUpsertWithWhereUniqueWithoutKebeleMenderInput[]
    createMany?: UsersCreateManyKebeleMenderInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutKebeleMenderInput | UsersUpdateWithWhereUniqueWithoutKebeleMenderInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutKebeleMenderInput | UsersUpdateManyWithWhereWithoutKebeleMenderInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutKebeleMenderNestedInput = {
    create?: XOR<UsersCreateWithoutKebeleMenderInput, UsersUncheckedCreateWithoutKebeleMenderInput> | UsersCreateWithoutKebeleMenderInput[] | UsersUncheckedCreateWithoutKebeleMenderInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutKebeleMenderInput | UsersCreateOrConnectWithoutKebeleMenderInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutKebeleMenderInput | UsersUpsertWithWhereUniqueWithoutKebeleMenderInput[]
    createMany?: UsersCreateManyKebeleMenderInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutKebeleMenderInput | UsersUpdateWithWhereUniqueWithoutKebeleMenderInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutKebeleMenderInput | UsersUpdateManyWithWhereWithoutKebeleMenderInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type ProfilesCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfilesCreateWithoutUserInput, ProfilesUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutUserInput
    connect?: ProfilesWhereUniqueInput
  }

  export type AddressCreateNestedOneWithoutUsersInput = {
    create?: XOR<AddressCreateWithoutUsersInput, AddressUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUsersInput
    connect?: AddressWhereUniqueInput
  }

  export type KebelesCreateNestedOneWithoutUsersInput = {
    create?: XOR<KebelesCreateWithoutUsersInput, KebelesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: KebelesCreateOrConnectWithoutUsersInput
    connect?: KebelesWhereUniqueInput
  }

  export type KebeleMendersCreateNestedOneWithoutUsersInput = {
    create?: XOR<KebeleMendersCreateWithoutUsersInput, KebeleMendersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: KebeleMendersCreateOrConnectWithoutUsersInput
    connect?: KebeleMendersWhereUniqueInput
  }

  export type ProfilesUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfilesCreateWithoutUserInput, ProfilesUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutUserInput
    connect?: ProfilesWhereUniqueInput
  }

  export type EnumROLESFieldUpdateOperationsInput = {
    set?: $Enums.ROLES
  }

  export type EnumACTIVESTATUSFieldUpdateOperationsInput = {
    set?: $Enums.ACTIVESTATUS
  }

  export type ProfilesUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfilesCreateWithoutUserInput, ProfilesUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutUserInput
    upsert?: ProfilesUpsertWithoutUserInput
    disconnect?: ProfilesWhereInput | boolean
    delete?: ProfilesWhereInput | boolean
    connect?: ProfilesWhereUniqueInput
    update?: XOR<XOR<ProfilesUpdateToOneWithWhereWithoutUserInput, ProfilesUpdateWithoutUserInput>, ProfilesUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<AddressCreateWithoutUsersInput, AddressUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AddressCreateOrConnectWithoutUsersInput
    upsert?: AddressUpsertWithoutUsersInput
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutUsersInput, AddressUpdateWithoutUsersInput>, AddressUncheckedUpdateWithoutUsersInput>
  }

  export type KebelesUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<KebelesCreateWithoutUsersInput, KebelesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: KebelesCreateOrConnectWithoutUsersInput
    upsert?: KebelesUpsertWithoutUsersInput
    connect?: KebelesWhereUniqueInput
    update?: XOR<XOR<KebelesUpdateToOneWithWhereWithoutUsersInput, KebelesUpdateWithoutUsersInput>, KebelesUncheckedUpdateWithoutUsersInput>
  }

  export type KebeleMendersUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<KebeleMendersCreateWithoutUsersInput, KebeleMendersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: KebeleMendersCreateOrConnectWithoutUsersInput
    upsert?: KebeleMendersUpsertWithoutUsersInput
    connect?: KebeleMendersWhereUniqueInput
    update?: XOR<XOR<KebeleMendersUpdateToOneWithWhereWithoutUsersInput, KebeleMendersUpdateWithoutUsersInput>, KebeleMendersUncheckedUpdateWithoutUsersInput>
  }

  export type ProfilesUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfilesCreateWithoutUserInput, ProfilesUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfilesCreateOrConnectWithoutUserInput
    upsert?: ProfilesUpsertWithoutUserInput
    disconnect?: ProfilesWhereInput | boolean
    delete?: ProfilesWhereInput | boolean
    connect?: ProfilesWhereUniqueInput
    update?: XOR<XOR<ProfilesUpdateToOneWithWhereWithoutUserInput, ProfilesUpdateWithoutUserInput>, ProfilesUncheckedUpdateWithoutUserInput>
  }

  export type UsersCreateNestedOneWithoutProfileInput = {
    create?: XOR<UsersCreateWithoutProfileInput, UsersUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UsersCreateOrConnectWithoutProfileInput
    connect?: UsersWhereUniqueInput
  }

  export type EnumGENDERFieldUpdateOperationsInput = {
    set?: $Enums.GENDER
  }

  export type UsersUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UsersCreateWithoutProfileInput, UsersUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UsersCreateOrConnectWithoutProfileInput
    upsert?: UsersUpsertWithoutProfileInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutProfileInput, UsersUpdateWithoutProfileInput>, UsersUncheckedUpdateWithoutProfileInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumROLESFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLES | EnumROLESFieldRefInput<$PrismaModel>
    in?: $Enums.ROLES[]
    notIn?: $Enums.ROLES[]
    not?: NestedEnumROLESFilter<$PrismaModel> | $Enums.ROLES
  }

  export type NestedEnumACTIVESTATUSFilter<$PrismaModel = never> = {
    equals?: $Enums.ACTIVESTATUS | EnumACTIVESTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.ACTIVESTATUS[]
    notIn?: $Enums.ACTIVESTATUS[]
    not?: NestedEnumACTIVESTATUSFilter<$PrismaModel> | $Enums.ACTIVESTATUS
  }

  export type NestedEnumROLESWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ROLES | EnumROLESFieldRefInput<$PrismaModel>
    in?: $Enums.ROLES[]
    notIn?: $Enums.ROLES[]
    not?: NestedEnumROLESWithAggregatesFilter<$PrismaModel> | $Enums.ROLES
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumROLESFilter<$PrismaModel>
    _max?: NestedEnumROLESFilter<$PrismaModel>
  }

  export type NestedEnumACTIVESTATUSWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ACTIVESTATUS | EnumACTIVESTATUSFieldRefInput<$PrismaModel>
    in?: $Enums.ACTIVESTATUS[]
    notIn?: $Enums.ACTIVESTATUS[]
    not?: NestedEnumACTIVESTATUSWithAggregatesFilter<$PrismaModel> | $Enums.ACTIVESTATUS
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumACTIVESTATUSFilter<$PrismaModel>
    _max?: NestedEnumACTIVESTATUSFilter<$PrismaModel>
  }

  export type NestedEnumGENDERFilter<$PrismaModel = never> = {
    equals?: $Enums.GENDER | EnumGENDERFieldRefInput<$PrismaModel>
    in?: $Enums.GENDER[]
    notIn?: $Enums.GENDER[]
    not?: NestedEnumGENDERFilter<$PrismaModel> | $Enums.GENDER
  }

  export type NestedEnumGENDERWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.GENDER | EnumGENDERFieldRefInput<$PrismaModel>
    in?: $Enums.GENDER[]
    notIn?: $Enums.GENDER[]
    not?: NestedEnumGENDERWithAggregatesFilter<$PrismaModel> | $Enums.GENDER
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGENDERFilter<$PrismaModel>
    _max?: NestedEnumGENDERFilter<$PrismaModel>
  }

  export type KebelesCreateWithoutAddressInput = {
    name: string
    meder?: KebeleMendersCreateNestedManyWithoutKebeleInput
    users?: UsersCreateNestedManyWithoutKebeleInput
  }

  export type KebelesUncheckedCreateWithoutAddressInput = {
    id?: number
    name: string
    meder?: KebeleMendersUncheckedCreateNestedManyWithoutKebeleInput
    users?: UsersUncheckedCreateNestedManyWithoutKebeleInput
  }

  export type KebelesCreateOrConnectWithoutAddressInput = {
    where: KebelesWhereUniqueInput
    create: XOR<KebelesCreateWithoutAddressInput, KebelesUncheckedCreateWithoutAddressInput>
  }

  export type KebelesCreateManyAddressInputEnvelope = {
    data: KebelesCreateManyAddressInput | KebelesCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type UsersCreateWithoutAdressInput = {
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    profile?: ProfilesCreateNestedOneWithoutUserInput
    kebele: KebelesCreateNestedOneWithoutUsersInput
    kebeleMender: KebeleMendersCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutAdressInput = {
    id?: number
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    kebeleId: number
    kebeleMenderId: number
    profile?: ProfilesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutAdressInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAdressInput, UsersUncheckedCreateWithoutAdressInput>
  }

  export type UsersCreateManyAdressInputEnvelope = {
    data: UsersCreateManyAdressInput | UsersCreateManyAdressInput[]
    skipDuplicates?: boolean
  }

  export type KebelesUpsertWithWhereUniqueWithoutAddressInput = {
    where: KebelesWhereUniqueInput
    update: XOR<KebelesUpdateWithoutAddressInput, KebelesUncheckedUpdateWithoutAddressInput>
    create: XOR<KebelesCreateWithoutAddressInput, KebelesUncheckedCreateWithoutAddressInput>
  }

  export type KebelesUpdateWithWhereUniqueWithoutAddressInput = {
    where: KebelesWhereUniqueInput
    data: XOR<KebelesUpdateWithoutAddressInput, KebelesUncheckedUpdateWithoutAddressInput>
  }

  export type KebelesUpdateManyWithWhereWithoutAddressInput = {
    where: KebelesScalarWhereInput
    data: XOR<KebelesUpdateManyMutationInput, KebelesUncheckedUpdateManyWithoutAddressInput>
  }

  export type KebelesScalarWhereInput = {
    AND?: KebelesScalarWhereInput | KebelesScalarWhereInput[]
    OR?: KebelesScalarWhereInput[]
    NOT?: KebelesScalarWhereInput | KebelesScalarWhereInput[]
    id?: IntFilter<"Kebeles"> | number
    name?: StringFilter<"Kebeles"> | string
    addressId?: IntFilter<"Kebeles"> | number
  }

  export type UsersUpsertWithWhereUniqueWithoutAdressInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutAdressInput, UsersUncheckedUpdateWithoutAdressInput>
    create: XOR<UsersCreateWithoutAdressInput, UsersUncheckedCreateWithoutAdressInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutAdressInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutAdressInput, UsersUncheckedUpdateWithoutAdressInput>
  }

  export type UsersUpdateManyWithWhereWithoutAdressInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutAdressInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    id?: IntFilter<"Users"> | number
    email?: StringFilter<"Users"> | string
    phone?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    role?: EnumROLESFilter<"Users"> | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFilter<"Users"> | $Enums.ACTIVESTATUS
    kebeleId?: IntFilter<"Users"> | number
    adressId?: IntFilter<"Users"> | number
    kebeleMenderId?: IntFilter<"Users"> | number
  }

  export type AddressCreateWithoutKebeleInput = {
    region: string
    zone: string
    wereda: string
    city: string
    users?: UsersCreateNestedManyWithoutAdressInput
  }

  export type AddressUncheckedCreateWithoutKebeleInput = {
    id?: number
    region: string
    zone: string
    wereda: string
    city: string
    users?: UsersUncheckedCreateNestedManyWithoutAdressInput
  }

  export type AddressCreateOrConnectWithoutKebeleInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutKebeleInput, AddressUncheckedCreateWithoutKebeleInput>
  }

  export type KebeleMendersCreateWithoutKebeleInput = {
    menderName: string
    users?: UsersCreateNestedManyWithoutKebeleMenderInput
  }

  export type KebeleMendersUncheckedCreateWithoutKebeleInput = {
    id?: number
    menderName: string
    users?: UsersUncheckedCreateNestedManyWithoutKebeleMenderInput
  }

  export type KebeleMendersCreateOrConnectWithoutKebeleInput = {
    where: KebeleMendersWhereUniqueInput
    create: XOR<KebeleMendersCreateWithoutKebeleInput, KebeleMendersUncheckedCreateWithoutKebeleInput>
  }

  export type KebeleMendersCreateManyKebeleInputEnvelope = {
    data: KebeleMendersCreateManyKebeleInput | KebeleMendersCreateManyKebeleInput[]
    skipDuplicates?: boolean
  }

  export type UsersCreateWithoutKebeleInput = {
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    profile?: ProfilesCreateNestedOneWithoutUserInput
    adress: AddressCreateNestedOneWithoutUsersInput
    kebeleMender: KebeleMendersCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutKebeleInput = {
    id?: number
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    adressId: number
    kebeleMenderId: number
    profile?: ProfilesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutKebeleInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutKebeleInput, UsersUncheckedCreateWithoutKebeleInput>
  }

  export type UsersCreateManyKebeleInputEnvelope = {
    data: UsersCreateManyKebeleInput | UsersCreateManyKebeleInput[]
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithoutKebeleInput = {
    update: XOR<AddressUpdateWithoutKebeleInput, AddressUncheckedUpdateWithoutKebeleInput>
    create: XOR<AddressCreateWithoutKebeleInput, AddressUncheckedCreateWithoutKebeleInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutKebeleInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutKebeleInput, AddressUncheckedUpdateWithoutKebeleInput>
  }

  export type AddressUpdateWithoutKebeleInput = {
    region?: StringFieldUpdateOperationsInput | string
    zone?: StringFieldUpdateOperationsInput | string
    wereda?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateManyWithoutAdressNestedInput
  }

  export type AddressUncheckedUpdateWithoutKebeleInput = {
    id?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    zone?: StringFieldUpdateOperationsInput | string
    wereda?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    users?: UsersUncheckedUpdateManyWithoutAdressNestedInput
  }

  export type KebeleMendersUpsertWithWhereUniqueWithoutKebeleInput = {
    where: KebeleMendersWhereUniqueInput
    update: XOR<KebeleMendersUpdateWithoutKebeleInput, KebeleMendersUncheckedUpdateWithoutKebeleInput>
    create: XOR<KebeleMendersCreateWithoutKebeleInput, KebeleMendersUncheckedCreateWithoutKebeleInput>
  }

  export type KebeleMendersUpdateWithWhereUniqueWithoutKebeleInput = {
    where: KebeleMendersWhereUniqueInput
    data: XOR<KebeleMendersUpdateWithoutKebeleInput, KebeleMendersUncheckedUpdateWithoutKebeleInput>
  }

  export type KebeleMendersUpdateManyWithWhereWithoutKebeleInput = {
    where: KebeleMendersScalarWhereInput
    data: XOR<KebeleMendersUpdateManyMutationInput, KebeleMendersUncheckedUpdateManyWithoutKebeleInput>
  }

  export type KebeleMendersScalarWhereInput = {
    AND?: KebeleMendersScalarWhereInput | KebeleMendersScalarWhereInput[]
    OR?: KebeleMendersScalarWhereInput[]
    NOT?: KebeleMendersScalarWhereInput | KebeleMendersScalarWhereInput[]
    id?: IntFilter<"KebeleMenders"> | number
    kebeleId?: IntFilter<"KebeleMenders"> | number
    menderName?: StringFilter<"KebeleMenders"> | string
  }

  export type UsersUpsertWithWhereUniqueWithoutKebeleInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutKebeleInput, UsersUncheckedUpdateWithoutKebeleInput>
    create: XOR<UsersCreateWithoutKebeleInput, UsersUncheckedCreateWithoutKebeleInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutKebeleInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutKebeleInput, UsersUncheckedUpdateWithoutKebeleInput>
  }

  export type UsersUpdateManyWithWhereWithoutKebeleInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutKebeleInput>
  }

  export type KebelesCreateWithoutMederInput = {
    name: string
    address: AddressCreateNestedOneWithoutKebeleInput
    users?: UsersCreateNestedManyWithoutKebeleInput
  }

  export type KebelesUncheckedCreateWithoutMederInput = {
    id?: number
    name: string
    addressId: number
    users?: UsersUncheckedCreateNestedManyWithoutKebeleInput
  }

  export type KebelesCreateOrConnectWithoutMederInput = {
    where: KebelesWhereUniqueInput
    create: XOR<KebelesCreateWithoutMederInput, KebelesUncheckedCreateWithoutMederInput>
  }

  export type UsersCreateWithoutKebeleMenderInput = {
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    profile?: ProfilesCreateNestedOneWithoutUserInput
    adress: AddressCreateNestedOneWithoutUsersInput
    kebele: KebelesCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutKebeleMenderInput = {
    id?: number
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    kebeleId: number
    adressId: number
    profile?: ProfilesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutKebeleMenderInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutKebeleMenderInput, UsersUncheckedCreateWithoutKebeleMenderInput>
  }

  export type UsersCreateManyKebeleMenderInputEnvelope = {
    data: UsersCreateManyKebeleMenderInput | UsersCreateManyKebeleMenderInput[]
    skipDuplicates?: boolean
  }

  export type KebelesUpsertWithoutMederInput = {
    update: XOR<KebelesUpdateWithoutMederInput, KebelesUncheckedUpdateWithoutMederInput>
    create: XOR<KebelesCreateWithoutMederInput, KebelesUncheckedCreateWithoutMederInput>
    where?: KebelesWhereInput
  }

  export type KebelesUpdateToOneWithWhereWithoutMederInput = {
    where?: KebelesWhereInput
    data: XOR<KebelesUpdateWithoutMederInput, KebelesUncheckedUpdateWithoutMederInput>
  }

  export type KebelesUpdateWithoutMederInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: AddressUpdateOneRequiredWithoutKebeleNestedInput
    users?: UsersUpdateManyWithoutKebeleNestedInput
  }

  export type KebelesUncheckedUpdateWithoutMederInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    addressId?: IntFieldUpdateOperationsInput | number
    users?: UsersUncheckedUpdateManyWithoutKebeleNestedInput
  }

  export type UsersUpsertWithWhereUniqueWithoutKebeleMenderInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutKebeleMenderInput, UsersUncheckedUpdateWithoutKebeleMenderInput>
    create: XOR<UsersCreateWithoutKebeleMenderInput, UsersUncheckedCreateWithoutKebeleMenderInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutKebeleMenderInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutKebeleMenderInput, UsersUncheckedUpdateWithoutKebeleMenderInput>
  }

  export type UsersUpdateManyWithWhereWithoutKebeleMenderInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutKebeleMenderInput>
  }

  export type ProfilesCreateWithoutUserInput = {
    firstName: string
    middleName: string
    lastName: string
    gender: $Enums.GENDER
    imageUrl: string
  }

  export type ProfilesUncheckedCreateWithoutUserInput = {
    id?: number
    firstName: string
    middleName: string
    lastName: string
    gender: $Enums.GENDER
    imageUrl: string
  }

  export type ProfilesCreateOrConnectWithoutUserInput = {
    where: ProfilesWhereUniqueInput
    create: XOR<ProfilesCreateWithoutUserInput, ProfilesUncheckedCreateWithoutUserInput>
  }

  export type AddressCreateWithoutUsersInput = {
    region: string
    zone: string
    wereda: string
    city: string
    kebele?: KebelesCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateWithoutUsersInput = {
    id?: number
    region: string
    zone: string
    wereda: string
    city: string
    kebele?: KebelesUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressCreateOrConnectWithoutUsersInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUsersInput, AddressUncheckedCreateWithoutUsersInput>
  }

  export type KebelesCreateWithoutUsersInput = {
    name: string
    address: AddressCreateNestedOneWithoutKebeleInput
    meder?: KebeleMendersCreateNestedManyWithoutKebeleInput
  }

  export type KebelesUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    addressId: number
    meder?: KebeleMendersUncheckedCreateNestedManyWithoutKebeleInput
  }

  export type KebelesCreateOrConnectWithoutUsersInput = {
    where: KebelesWhereUniqueInput
    create: XOR<KebelesCreateWithoutUsersInput, KebelesUncheckedCreateWithoutUsersInput>
  }

  export type KebeleMendersCreateWithoutUsersInput = {
    menderName: string
    kebele: KebelesCreateNestedOneWithoutMederInput
  }

  export type KebeleMendersUncheckedCreateWithoutUsersInput = {
    id?: number
    kebeleId: number
    menderName: string
  }

  export type KebeleMendersCreateOrConnectWithoutUsersInput = {
    where: KebeleMendersWhereUniqueInput
    create: XOR<KebeleMendersCreateWithoutUsersInput, KebeleMendersUncheckedCreateWithoutUsersInput>
  }

  export type ProfilesUpsertWithoutUserInput = {
    update: XOR<ProfilesUpdateWithoutUserInput, ProfilesUncheckedUpdateWithoutUserInput>
    create: XOR<ProfilesCreateWithoutUserInput, ProfilesUncheckedCreateWithoutUserInput>
    where?: ProfilesWhereInput
  }

  export type ProfilesUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfilesWhereInput
    data: XOR<ProfilesUpdateWithoutUserInput, ProfilesUncheckedUpdateWithoutUserInput>
  }

  export type ProfilesUpdateWithoutUserInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGENDERFieldUpdateOperationsInput | $Enums.GENDER
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: EnumGENDERFieldUpdateOperationsInput | $Enums.GENDER
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type AddressUpsertWithoutUsersInput = {
    update: XOR<AddressUpdateWithoutUsersInput, AddressUncheckedUpdateWithoutUsersInput>
    create: XOR<AddressCreateWithoutUsersInput, AddressUncheckedCreateWithoutUsersInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutUsersInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutUsersInput, AddressUncheckedUpdateWithoutUsersInput>
  }

  export type AddressUpdateWithoutUsersInput = {
    region?: StringFieldUpdateOperationsInput | string
    zone?: StringFieldUpdateOperationsInput | string
    wereda?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    kebele?: KebelesUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    region?: StringFieldUpdateOperationsInput | string
    zone?: StringFieldUpdateOperationsInput | string
    wereda?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    kebele?: KebelesUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type KebelesUpsertWithoutUsersInput = {
    update: XOR<KebelesUpdateWithoutUsersInput, KebelesUncheckedUpdateWithoutUsersInput>
    create: XOR<KebelesCreateWithoutUsersInput, KebelesUncheckedCreateWithoutUsersInput>
    where?: KebelesWhereInput
  }

  export type KebelesUpdateToOneWithWhereWithoutUsersInput = {
    where?: KebelesWhereInput
    data: XOR<KebelesUpdateWithoutUsersInput, KebelesUncheckedUpdateWithoutUsersInput>
  }

  export type KebelesUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: AddressUpdateOneRequiredWithoutKebeleNestedInput
    meder?: KebeleMendersUpdateManyWithoutKebeleNestedInput
  }

  export type KebelesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    addressId?: IntFieldUpdateOperationsInput | number
    meder?: KebeleMendersUncheckedUpdateManyWithoutKebeleNestedInput
  }

  export type KebeleMendersUpsertWithoutUsersInput = {
    update: XOR<KebeleMendersUpdateWithoutUsersInput, KebeleMendersUncheckedUpdateWithoutUsersInput>
    create: XOR<KebeleMendersCreateWithoutUsersInput, KebeleMendersUncheckedCreateWithoutUsersInput>
    where?: KebeleMendersWhereInput
  }

  export type KebeleMendersUpdateToOneWithWhereWithoutUsersInput = {
    where?: KebeleMendersWhereInput
    data: XOR<KebeleMendersUpdateWithoutUsersInput, KebeleMendersUncheckedUpdateWithoutUsersInput>
  }

  export type KebeleMendersUpdateWithoutUsersInput = {
    menderName?: StringFieldUpdateOperationsInput | string
    kebele?: KebelesUpdateOneRequiredWithoutMederNestedInput
  }

  export type KebeleMendersUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    kebeleId?: IntFieldUpdateOperationsInput | number
    menderName?: StringFieldUpdateOperationsInput | string
  }

  export type UsersCreateWithoutProfileInput = {
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    adress: AddressCreateNestedOneWithoutUsersInput
    kebele: KebelesCreateNestedOneWithoutUsersInput
    kebeleMender: KebeleMendersCreateNestedOneWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutProfileInput = {
    id?: number
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    kebeleId: number
    adressId: number
    kebeleMenderId: number
  }

  export type UsersCreateOrConnectWithoutProfileInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutProfileInput, UsersUncheckedCreateWithoutProfileInput>
  }

  export type UsersUpsertWithoutProfileInput = {
    update: XOR<UsersUpdateWithoutProfileInput, UsersUncheckedUpdateWithoutProfileInput>
    create: XOR<UsersCreateWithoutProfileInput, UsersUncheckedCreateWithoutProfileInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutProfileInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutProfileInput, UsersUncheckedUpdateWithoutProfileInput>
  }

  export type UsersUpdateWithoutProfileInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    adress?: AddressUpdateOneRequiredWithoutUsersNestedInput
    kebele?: KebelesUpdateOneRequiredWithoutUsersNestedInput
    kebeleMender?: KebeleMendersUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutProfileInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    kebeleId?: IntFieldUpdateOperationsInput | number
    adressId?: IntFieldUpdateOperationsInput | number
    kebeleMenderId?: IntFieldUpdateOperationsInput | number
  }

  export type KebelesCreateManyAddressInput = {
    id?: number
    name: string
  }

  export type UsersCreateManyAdressInput = {
    id?: number
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    kebeleId: number
    kebeleMenderId: number
  }

  export type KebelesUpdateWithoutAddressInput = {
    name?: StringFieldUpdateOperationsInput | string
    meder?: KebeleMendersUpdateManyWithoutKebeleNestedInput
    users?: UsersUpdateManyWithoutKebeleNestedInput
  }

  export type KebelesUncheckedUpdateWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    meder?: KebeleMendersUncheckedUpdateManyWithoutKebeleNestedInput
    users?: UsersUncheckedUpdateManyWithoutKebeleNestedInput
  }

  export type KebelesUncheckedUpdateManyWithoutAddressInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUpdateWithoutAdressInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    profile?: ProfilesUpdateOneWithoutUserNestedInput
    kebele?: KebelesUpdateOneRequiredWithoutUsersNestedInput
    kebeleMender?: KebeleMendersUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutAdressInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    kebeleId?: IntFieldUpdateOperationsInput | number
    kebeleMenderId?: IntFieldUpdateOperationsInput | number
    profile?: ProfilesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutAdressInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    kebeleId?: IntFieldUpdateOperationsInput | number
    kebeleMenderId?: IntFieldUpdateOperationsInput | number
  }

  export type KebeleMendersCreateManyKebeleInput = {
    id?: number
    menderName: string
  }

  export type UsersCreateManyKebeleInput = {
    id?: number
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    adressId: number
    kebeleMenderId: number
  }

  export type KebeleMendersUpdateWithoutKebeleInput = {
    menderName?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateManyWithoutKebeleMenderNestedInput
  }

  export type KebeleMendersUncheckedUpdateWithoutKebeleInput = {
    id?: IntFieldUpdateOperationsInput | number
    menderName?: StringFieldUpdateOperationsInput | string
    users?: UsersUncheckedUpdateManyWithoutKebeleMenderNestedInput
  }

  export type KebeleMendersUncheckedUpdateManyWithoutKebeleInput = {
    id?: IntFieldUpdateOperationsInput | number
    menderName?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUpdateWithoutKebeleInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    profile?: ProfilesUpdateOneWithoutUserNestedInput
    adress?: AddressUpdateOneRequiredWithoutUsersNestedInput
    kebeleMender?: KebeleMendersUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutKebeleInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    adressId?: IntFieldUpdateOperationsInput | number
    kebeleMenderId?: IntFieldUpdateOperationsInput | number
    profile?: ProfilesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutKebeleInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    adressId?: IntFieldUpdateOperationsInput | number
    kebeleMenderId?: IntFieldUpdateOperationsInput | number
  }

  export type UsersCreateManyKebeleMenderInput = {
    id?: number
    email: string
    phone: string
    password: string
    role?: $Enums.ROLES
    activeStatus?: $Enums.ACTIVESTATUS
    kebeleId: number
    adressId: number
  }

  export type UsersUpdateWithoutKebeleMenderInput = {
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    profile?: ProfilesUpdateOneWithoutUserNestedInput
    adress?: AddressUpdateOneRequiredWithoutUsersNestedInput
    kebele?: KebelesUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutKebeleMenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    kebeleId?: IntFieldUpdateOperationsInput | number
    adressId?: IntFieldUpdateOperationsInput | number
    profile?: ProfilesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutKebeleMenderInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumROLESFieldUpdateOperationsInput | $Enums.ROLES
    activeStatus?: EnumACTIVESTATUSFieldUpdateOperationsInput | $Enums.ACTIVESTATUS
    kebeleId?: IntFieldUpdateOperationsInput | number
    adressId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use AddressCountOutputTypeDefaultArgs instead
     */
    export type AddressCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KebelesCountOutputTypeDefaultArgs instead
     */
    export type KebelesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KebelesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KebeleMendersCountOutputTypeDefaultArgs instead
     */
    export type KebeleMendersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KebeleMendersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressDefaultArgs instead
     */
    export type AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KebelesDefaultArgs instead
     */
    export type KebelesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KebelesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KebeleMendersDefaultArgs instead
     */
    export type KebeleMendersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KebeleMendersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProfilesDefaultArgs instead
     */
    export type ProfilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProfilesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}