// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
enum GENDER{
  MALE
  FEMALE
}

enum ROLES{
  USER
  ADMIN
  MANAGER
  SECRATERY
}
enum ACTIVESTATUS{
  BLOCKED
  ACTIVE
  INACTIVE
}

model Address{
  id Int @id @default(autoincrement())
  region String
  zone String
  wereda String
  city String
  //ref
  kebele Kebeles[]


  
}
model Kebeles {
  id        Int      @id @default(autoincrement())
  name      String
  addressId Int
  address   Address  @relation(fields: [addressId], references: [id], onDelete: Cascade) // Ref
  meder     KebeleMenders[] // Ref
   user Users[]  // Ref
}

model KebeleMenders {
    id Int @id @default(autoincrement())
    kebeleId Int
    menderName String
    //refrence
    kebele Kebeles @relation(fields: [kebeleId],references: [id],onDelete: Cascade)
    
}

model Users{
      id Int @id @default(autoincrement())
      email String @unique
      phone String @unique
      password String 
      role ROLES @default(USER)
      activeStatus ACTIVESTATUS @default(ACTIVE)
      kebeleId Int
      //ref
      profile Profiles?
      //refress
      kebele Kebeles @relation(fields: [kebeleId],references: [id],onDelete: Cascade)
      

}

model Profiles{
      id Int @id @default(autoincrement())
      userId Int @unique
      firstName String
      middleName String
      lastName String
      gender GENDER
      imageUrl String
      //reference
      user Users @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model IdRequests {
  id Int @id @default(autoincrement())
  uuid String
  menderId Int
  email String @unique
  firstName String
  lastName String
  fatherName String
  matherName String
  birthDate DateTime @default(now())
  gender String
  houseNumber String
  workStatus String
  nationality String
  houseLive String 
  requestStatus String
  phone String @unique
  createdDate DateTime @default(now())
  // ref
     idStatus IdStatuss[]
}
model IdStatuss {
  id Int @id @default(autoincrement())
  idRequestId Int @unique
  paymentState String
  menderStatus String
  receptionStatus String
  managerStatus String
  isCompleted Boolean
  isGiven Boolean
  givenDate DateTime @default(now())
  expireDate DateTime
  // ref
  birthRequest BirthRequests[]

   //reference
   idRequest IdRequests @relation(fields: [idRequestId],references: [id],onDelete: Cascade)
}
model BirthRequests {
  id Int @id @default(autoincrement())
  idStatusId Int
  requestStatus String
  createdDate DateTime
  // ref 
  deathRequest DeathRequests[]
  //reference
  idSatus IdStatuss @relation(fields: [idStatusId],references: [id],onDelete: Cascade)
}

model DeathRequests{
  id Int @id @default(autoincrement())
  birthRequestId Int
  receptionStatus String
  managerStatus String
  isCompleted Boolean
  isGiven Boolean
  givenDate DateTime
   //reference
  birthRequest BirthRequests @relation(fields: [birthRequestId],references: [id],onDelete: Cascade)
}
